<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓笙的BLOG</title>
  
  <subtitle>一个来自暗夜里的影子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/"/>
  <updated>2019-12-11T12:07:56.972Z</updated>
  <id>https://github.com/zongmansheng/zongmansheng.github.io.git/</id>
  
  <author>
    <name>ZongMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ个人总结</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/</id>
    <published>2019-12-11T00:25:47.000Z</published>
    <updated>2019-12-11T12:07:56.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>[TOC]</p><h3 id="一、RabbitMQ简介"><a href="#一、RabbitMQ简介" class="headerlink" title="一、RabbitMQ简介"></a>一、RabbitMQ简介</h3><blockquote><p>​        AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>​        AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><p>​        RabbitMQ是一个实现了AMQP（Advanced Message Queuing Protocol）高级消息队列协议的消息队列服务，采用Erlang语言开发。</p></blockquote><h3 id="二、RabbitMQ优势"><a href="#二、RabbitMQ优势" class="headerlink" title="二、RabbitMQ优势"></a>二、RabbitMQ优势</h3><blockquote><p>RabbitMQ是唯一一个实现了AMQP标准的消息服务器；</p><p>可靠性，RabbitMQ的持久化支持，保证了消息的稳定性；</p><p>高并发，RabbitMQ使用了Erlang开发语言，Erlang是为电话交换机开发的语言，天生自带高并发光环，和高可用特性；</p><p>集群部署简单，正是应为Erlang使得RabbitMQ集群部署变的超级简单；</p><p>社区活跃度高，根据网上资料来看，RabbitMQ也是首选；</p></blockquote><h3 id="三、RabbitMQ使用场景"><a href="#三、RabbitMQ使用场景" class="headerlink" title="三、RabbitMQ使用场景"></a>三、RabbitMQ使用场景</h3><h4 id="3-1、异步处理"><a href="#3-1、异步处理" class="headerlink" title="3.1、异步处理"></a>3.1、异步处理</h4><blockquote><p>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种：</p></blockquote><h5 id="3-1-1、串行的方式"><a href="#3-1-1、串行的方式" class="headerlink" title="3.1.1、串行的方式"></a>3.1.1、串行的方式</h5><blockquote><p>串行方式:</p><p>将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/001.png" alt></p><h5 id="3-1-2、并行的方式"><a href="#3-1-2、并行的方式" class="headerlink" title="3.1.2、并行的方式"></a>3.1.2、并行的方式</h5><blockquote><p>并行方式:</p><p>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 </p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/002.png" alt></p><blockquote><p>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并性已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回. </p></blockquote><h5 id="3-1-3、消息队列"><a href="#3-1-3、消息队列" class="headerlink" title="3.1.3、消息队列"></a>3.1.3、消息队列</h5><blockquote><p>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 </p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/003.png" alt></p><blockquote><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p></blockquote><h4 id="3-2、应用解耦"><a href="#3-2、应用解耦" class="headerlink" title="3.2、应用解耦"></a>3.2、应用解耦</h4><blockquote><p>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/004.png" alt></p><blockquote><p>这种做法有一个缺点:</p><ul><li>当库存系统出现故障时,订单就会失败。</li><li>订单系统和库存系统高耦合。<br>引入消息队列 </li></ul></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/005.png" alt></p><blockquote><ul><li>订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</li><li>库存系统:订阅下单的消息，获取下单消息，进行库操作。<br>就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</li></ul></blockquote><h4 id="3-3、流量削峰"><a href="#3-3、流量削峰" class="headerlink" title="3.3、流量削峰"></a>3.3、流量削峰</h4><blockquote><p>流量削峰一般在秒杀活动中应用广泛<br>场景:秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。<br>作用:<br>1.可以控制活动人数，超过此一定阀值的订单直接丢弃<br>2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) </p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/006.png" alt></p><blockquote><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.<br>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p></blockquote><h3 id="四、技术术语"><a href="#四、技术术语" class="headerlink" title="四、技术术语"></a>四、技术术语</h3><blockquote><p>AMQP模型（AMQP Model）：一个由关键实体和语义表示的逻辑框架，遵从AMQP规范的服务器必须提供这些实体和语义。为了实现本规范中定义的语义，客户端可以发送命令来控制AMQP服务器。<br>连接（Connection）：一个网络连接，比如TCP/IP套接字连接。<br>会话（Session）：端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。<br>信道（Channel）：多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。<br>客户端（Client）：AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。<br>服务器（Server）：接受客户端连接，实现AMQP消息队列和路由功能的进程。也称为“消息代理”。<br>端点（Peer）：AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。<br>搭档（Partner）：当描述两个端点之间的交互过程时，使用术语“搭档”来表示“另一个”端点的简记法。比如我们定义端点A和端点B，当它们进行通信时，端点B是端点A的搭档，端点A是端点B的搭档。<br>片段集（Assembly）：段的有序集合，形成一个逻辑工作单元。<br>段（Segment）：帧的有序集合，形成片段集中一个完整子单元。<br>帧（Frame）：AMQP传输的一个原子单元。一个帧是一个段中的任意分片。<br>控制（Control）：单向指令，AMQP规范假设这些指令的传输是不可靠的。<br>命令（Command）：需要确认的指令，AMQP规范规定这些指令的传输是可靠的。<br>异常（Exception）：在执行一个或者多个命令时可能发生的错误状态。<br>类（Class）：一批用来描述某种特定功能的AMQP命令或者控制。<br>消息头（Header）：描述消息数据属性的一种特殊段。<br>消息体（Body）：包含应用程序数据的一种特殊段。消息体段对于服务器来说完全透明——服务器不能查看或者修改消息体。<br>消息内容（Content）：包含在消息体段中的的消息数据。<br>交换器（Exchange）：服务器中的实体，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。<br>交换器类型（Exchange Type）：基于不同路由语义的交换器类。<br>消息队列（Message Queue）：一个命名实体，用来保存消息直到发送给消费者。<br>绑定器（Binding）：消息队列和交换器之间的关联。<br>绑定器关键字（Binding Key）：绑定的名称。一些交换器类型可能使用这个名称作为定义绑定器路由行为的模式。<br>路由关键字（Routing Key）：一个消息头，交换器可以用这个消息头决定如何路由某条消息。<br>持久存储（Durable）：一种服务器资源，当服务器重启时，保存的消息数据不会丢失。<br>临时存储（Transient）：一种服务器资源，当服务器重启时，保存的消息数据会丢失。<br>持久化（Persistent）：服务器将消息保存在可靠磁盘存储中，当服务器重启时，消息不会丢失。<br>非持久化（Non-Persistent）：服务器将消息保存在内存中，当服务器重启时，消息可能丢失。<br>消费者（Consumer）：一个从消息队列中请求消息的客户端应用程序。<br>生产者（Producer）：一个向交换器发布消息的客户端应用程序。<br>虚拟主机（Virtual Host）：一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。客户端应用程序在登录到服务器之后，可以选择一个虚拟主机。</p></blockquote><h3 id="五、系统架构"><a href="#五、系统架构" class="headerlink" title="五、系统架构"></a>五、系统架构</h3><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/007.png" alt></p><blockquote><p>1.Channel（信道）：多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，复用TCP连接的通道。<br>2.Producer（消息的生产者）：向消息队列发布消息的客户端应用程序。<br>3.Consumer（消息的消费者）：从消息队列取得消息的客户端应用程序。<br>4.Message（消息）：消息由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（消息优先权）、delivery-mode（是否持久性存储）等。<br>5.Routing Key（路由键）：消息头的一个属性，用于标记消息的路由规则，决定了交换机的转发路径。最大长度255 字节。<br>6.Queue（消息队列）：存储消息的一种数据结构，用来保存消息，直到消息发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将消息取走。需要注意，当多个消费者订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理，每一条消息只能被一个订阅者接收。<br>7.Exchange（交换器|路由器）：提供Producer到Queue之间的匹配，接收生产者发送的消息并将这些消息按照路由规则转发到消息队列。交换器用于转发消息，它不会存储消息 ，如果没有 Queue绑定到 Exchange 的话，它会直接丢弃掉 Producer 发送过来的消息。交换器有四种消息调度策略（下面会介绍），分别是fanout, direct, topic, headers。<br>8.Binding（绑定）：用于建立Exchange和Queue之间的关联。一个绑定就是基于Binding Key将Exchange和Queue连接起来的路由规则，所以可以将交换器理解成一个由Binding构成的路由表。<br>6.Binding Key（绑定键）：Exchange与Queue的绑定关系，用于匹配Routing Key。最大长度255 字节。<br>7.Broker：RabbitMQ Server，服务器实体。它提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输。</p></blockquote><h4 id="5-1、Exchange消息调度策略"><a href="#5-1、Exchange消息调度策略" class="headerlink" title="5.1、Exchange消息调度策略"></a>5.1、Exchange消息调度策略</h4><blockquote><p>​        调度策略是指Exchange在收到生产者发送的消息后依据什么规则把消息转发到一个或多个队列中保存。调度策略与三个因素相关：</p><p>Exchange Type（Exchange的类型）</p><p>Binding Key（Exchange和Queue的绑定关系）</p><p>消息的标记信息（Routing Key和headers）。<br>Exchange根据消息的Routing Key和Exchange绑定Queue的Binding Key分配消息。生产者在将消息发送给Exchange的时候，一般会指定一个Routing Key，来指定这个消息的路由规则，而这个Routing Key需要与Exchange Type及Binding Key联合使用才能最终生效。<br>在Exchange Type与Binding Key固定的情况下（一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定Routing Key来决定消息流向哪里。</p></blockquote><h4 id="5-2、交换器有四种类型：Direct-topic-Headers-and-Fanout"><a href="#5-2、交换器有四种类型：Direct-topic-Headers-and-Fanout" class="headerlink" title="5.2、交换器有四种类型：Direct, topic, Headers and Fanout"></a>5.2、交换器有四种类型：Direct, topic, Headers and Fanout</h4><blockquote><ul><li>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 routing_key, 消息的routing_key匹配时, 才会被交换器投送到绑定的队列中去.</li><li>Topic：按规则转发消息（最灵活）</li><li>Headers：设置header attribute参数类型的交换器</li><li>Fanout：转发消息到所有绑定队列</li></ul></blockquote><h5 id="5-2-1、Fanout-（订阅模式-广播模式）"><a href="#5-2-1、Fanout-（订阅模式-广播模式）" class="headerlink" title="5.2.1、Fanout （订阅模式|广播模式）"></a>5.2.1、Fanout （订阅模式|广播模式）</h5><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/008.png" alt></p><blockquote><p>交换器会把所有发送到该交换器的消息路由到所有与该交换器绑定的消息队列中。订阅模式<br>与Binding Key和Routing Key无关，交换器将接受到的消息分发给有绑定关系的所有消息队列队列（不论Binding Key和Routing Key是什么）。类似于子网广播，子网内的每台主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/009.png" alt></p><h5 id="5-2-2、Direct（路由模式）"><a href="#5-2-2、Direct（路由模式）" class="headerlink" title="5.2.2、Direct（路由模式）"></a>5.2.2、Direct（路由模式）</h5><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/010.png" alt></p><blockquote><p>精确匹配：当消息的Routing Key与 Exchange和Queue 之间的Binding Key完全匹配，如果匹配成功，将消息分发到该Queue。只有当Routing Key和Binding Key完全匹配的时候，消息队列才可以获取消息。Direct是Exchange的默认模式。<br>RabbitMQ默认提供了一个Exchange，名字是空字符串，类型是Direct，绑定到所有的Queue（每一个Queue和这个无名Exchange之间的Binding Key是Queue的名字）。所以，有时候我们感觉不需要交换器也可以发送和接收消息，但是实际上是使用了RabbitMQ默认提供的Exchange。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/011.png" alt></p><h5 id="5-2-3、Topic-（通配符模式）"><a href="#5-2-3、Topic-（通配符模式）" class="headerlink" title="5.2.3、Topic （通配符模式）"></a>5.2.3、Topic （通配符模式）</h5><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/012.png" alt></p><blockquote><p>按照正则表达式模糊匹配：用消息的Routing Key与 Exchange和Queue 之间的Binding Key进行模糊匹配，如果匹配成功，将消息分发到该Queue。<br>Routing Key是一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词）。Binding Key与Routing Key一样也是句点号“. ”分隔的字符串。Binding Key中可以存在两种特殊字符“ <em> ”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/013.png" alt></p><h5 id="5-2-4、Headers（键值对模式）"><a href="#5-2-4、Headers（键值对模式）" class="headerlink" title="5.2.4、Headers（键值对模式）"></a>5.2.4、Headers（键值对模式）</h5><blockquote><p>Headers不依赖于Routing Key与Binding Key的匹配规则来转发消息，交换器的路由规则是通过消息头的Headers属性来进行匹配转发的，类似HTTP请求的Headers。<br>在绑定Queue与Exchange时指定一组键值对，键值对的Hash结构中要求携带一个键“x-match”，这个键的Value可以是any或all，代表消息携带的Hash是需要全部匹配(all)，还是仅匹配一个键(any)。<br>当消息发送到Exchange时，交换器会取到该消息的headers，对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。Headers交换机的优势是匹配的规则不被限定为字符串(String)，而是Object类型。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/014.png" alt></p><h4 id="5-3、RPC"><a href="#5-3、RPC" class="headerlink" title="5.3、RPC"></a>5.3、RPC</h4><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/015.png" alt></p><blockquote><p>MQ本身是基于异步的消息处理，前面的示例中所有的生产者（P）将消息发送到RabbitMQ后不会知道消费者（C）处理成功或者失败，甚至连有没有消费者来处理这条消息都不知道。但实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用）。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/11/rabbitmq-ge-ren-zong-jie/016.png" alt></p><blockquote><p>RabbitMQ中实现RPC的机制是：<br>一. 生产者发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14个属性，这些属性会随着消息一起发送）中设置两个属性值replyTo（一个Queue名称，用于告诉消费者处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，消费者处理完成后需要将此属性返还，生产者将根据这个id了解哪条请求被成功执行了或执行失败）。<br>二. 消费者收到消息并处理。<br>三. 消费者处理完消息后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性。<br>四. 生产者之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理。</p></blockquote><h4 id="5-4、消息确认-Message-acknowledgment"><a href="#5-4、消息确认-Message-acknowledgment" class="headerlink" title="5.4、消息确认:Message acknowledgment"></a>5.4、消息确认:Message acknowledgment</h4><blockquote><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在Timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。<br>这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的问题，Queue中堆积的消息会越来越多，消费者重启后会重复消费这些消息并重复执行业务逻辑。<br>如果我们采用no-ack的方式进行确认，也就是说，每次Consumer接到数据后，而不管是否处理完成，RabbitMQ会立即把这个Message标记为完成，然后从queue中删除了。</p></blockquote><h4 id="5-5、消息持久化-Message-durability"><a href="#5-5、消息持久化-Message-durability" class="headerlink" title="5.5、消息持久化:Message durability"></a>5.5、消息持久化:Message durability</h4><blockquote><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。但依然解决不了小概率丢失事件的发生（比如RabbitMQ服务器已经接收到生产者的消息，但还没来得及持久化该消息时RabbitMQ服务器就断电了），如果我们需要对这种小概率事件也要管理起来，那么我们要用到事务(下面再讲)。</p></blockquote><h4 id="5-6、分发机制"><a href="#5-6、分发机制" class="headerlink" title="5.6、分发机制"></a>5.6、分发机制</h4><blockquote><p>我们在应用程序使用消息系统时，一般情况下生产者往队列里插入数据时速度是比较快的，但是消费者消费数据往往涉及到一些业务逻辑处理导致速度跟不上生产者生产数据。因此如果一个生产者对应一个消费者的话，很容易导致很多消息堆积在队列里。这时，就得使用工作队列了。一个队列有多个消费者同时消费数据。<br>工作队列有两种分发数据的方式：轮询分发（Round-robin）和 公平分发（Fair dispatch）。轮询分发：队列给每一个消费者发送数量一样的数据。公平分发：消费者设置每次从队列中取一条数据，并且消费完后手动应答，继续从队列取下一个数据。</p></blockquote><h5 id="5-6-1、轮询分发：Round-robin-dispatching"><a href="#5-6-1、轮询分发：Round-robin-dispatching" class="headerlink" title="5.6.1、轮询分发：Round-robin dispatching"></a>5.6.1、轮询分发：Round-robin dispatching</h5><blockquote><p>如果工作队列中有两个消费者，两个消费者得到的数据量一样的，并不会因为两个消费者处理数据速度不一样使得两个消费者取得不一样数量的数据。但是这种分发方式存在着一些隐患，消费者虽然得到了消息，但是如果消费者没能成功处理业务逻辑，在RabbitMQ中也不存在这条消息。就会出现消息丢失并且业务逻辑没能成功处理的情况。</p></blockquote><h5 id="5-6-2、公平分发：Fair-dispatch"><a href="#5-6-2、公平分发：Fair-dispatch" class="headerlink" title="5.6.2、公平分发：Fair dispatch"></a>5.6.2、公平分发：Fair dispatch</h5><blockquote><p>消费者设置每次从队列里取一条数据，并且关闭自动回复机制，每次取完一条数据后，手动回复并继续取下一条数据。与轮询分发不同的是，当每个消费都设置了每次只会从队列取一条数据时，并且关闭自动应答，在每次处理完数据后手动给队列发送确认收到数据。这样队列就会公平给每个消息费者发送数据，消费一条再发第二条，而且可以在管理界面中看到数据是一条条随着消费者消费完从而减少的，并不是一下子全部分发完了。采用公平分发方式就不会出现消息丢失并且业务逻辑没能成功处理的情况。</p></blockquote><h4 id="5-7、事务"><a href="#5-7、事务" class="headerlink" title="5.7、事务"></a>5.7、事务</h4><blockquote><p>对事务的支持是AMQP协议的一个重要特性。假设当生产者将一个持久化消息发送给服务器时，因为consume命令本身没有任何Response返回，所以即使服务器崩溃，没有持久化该消息，生产者也无法获知该消息已经丢失。如果此时使用事务，即通过txSelect()开启一个事务，然后发送消息给服务器，然后通过txCommit()提交该事务，即可以保证，如果txCommit()提交了，则该消息一定会持久化，如果txCommit()还未提交即服务器崩溃，则该消息不会服务器接收。当然Rabbit MQ也提供了txRollback()命令用于回滚某一个事务。</p></blockquote><h4 id="5-8、Confirm机制"><a href="#5-8、Confirm机制" class="headerlink" title="5.8、Confirm机制"></a>5.8、Confirm机制</h4><blockquote><p>使用事务固然可以保证只有提交的事务，才会被服务器执行。但是这样同时也将客户端与消息服务器同步起来，这背离了消息队列解耦的本质。Rabbit MQ提供了一个更加轻量级的机制来保证生产者可以感知服务器消息是否已被路由到正确的队列中——Confirm。如果设置channel为confirm状态，则通过该channel发送的消息都会被分配一个唯一的ID，然后一旦该消息被正确的路由到匹配的队列中后，服务器会返回给生产者一个Confirm，该Confirm包含该消息的ID，这样生产者就会知道该消息已被正确分发。对于持久化消息，只有该消息被持久化后，才会返回Confirm。Confirm机制的最大优点在于异步，生产者在发送消息以后，即可继续执行其他任务。而服务器返回Confirm后，会触发生产者的回调函数，生产者在回调函数中处理Confirm信息。如果消息服务器发生异常，导致该消息丢失，会返回给生产者一个nack，表示消息已经丢失，这样生产者就可以通过重发消息，保证消息不丢失。Confirm机制在性能上要比事务优越很多。但是Confirm机制，无法进行回滚，就是一旦服务器崩溃，生产者无法得到Confirm信息，生产者其实本身也不知道该消息是否已经被持久化，只有继续重发来保证消息不丢失，但是如果原先已经持久化的消息，并不会被回滚，这样队列中就会存在两条相同的消息，系统需要支持去重。</p></blockquote><h4 id="5-9、Alternate-Exchange（代替交换器）"><a href="#5-9、Alternate-Exchange（代替交换器）" class="headerlink" title="5.9、Alternate Exchange（代替交换器）"></a>5.9、Alternate Exchange（代替交换器）</h4><blockquote><p>Alternate Exchange是Rabbitmq自己扩展的功能，不是AMQP协议定义的。<br>创建Exchange指定该Exchange的Alternate Exchange，发送消息的时候如果Exchange没有成功把消息路由到队列中去，这就会将此消息路由到Alternate Exchange属性指定的Exchange上了。需要在创建Exchange时添加alternate-exchange属性。如果Alternate Exchange也没能成功把消息路由到队列中去，这个消息就会丢失。可以触发publish confirm机制，表示这个消息没有确认。<br>创建交换器时需要指定如下属性</p></blockquote><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> argsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>argsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“alternate<span class="token operator">-</span>exchange”<span class="token punctuation">,</span>“Alternate Exchange Name”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-10、TTL（生存时间）"><a href="#5-10、TTL（生存时间）" class="headerlink" title="5.10、TTL（生存时间）"></a>5.10、TTL（生存时间）</h4><blockquote><p>RabbitMQ允许您为消息和队列设置TTL（生存时间）。 可以使用可选的队列参数或策略完成（推荐使用后一个选项）。 可以为单个队列，一组队列或单个消息应用消息TTL。</p><p>设置消息的过期时间</p></blockquote><pre class=" language-java"><code class="language-java">MessageProperties messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>messageProperties<span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>“<span class="token number">30000</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>设置队列中消息的过期时间<br>在声明一个队列时，可以指定队列中消息的过期时间，需要添加x-message-ttl属性。</p></blockquote><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“x<span class="token operator">-</span>message<span class="token operator">-</span>ttl”<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果同时制定了Message TTL，Queue TTL，则时间短的生效。</p></blockquote><h4 id="5-11、Queue-Length-Limit（队列长度限制）"><a href="#5-11、Queue-Length-Limit（队列长度限制）" class="headerlink" title="5.11、Queue Length Limit（队列长度限制）"></a>5.11、Queue Length Limit（队列长度限制）</h4><blockquote><p>可以设置队列中消息数量的限制，如果测试队列中最多只有5个消息，当第六条消息发送过来的时候，会删除最早的那条消息。队列中永远只有5条消息。<br>使用代码声明含有x-max-length和x-max-length-bytes属性的队列<br>Max length(x-max-length) 用来控制队列中消息的数量。<br>如果超出数量，则先到达的消息将会被删除掉。</p><p>Max length bytes(x-max-length-bytes) 用来控制队列中消息总的大小。<br>如果超过总大小，则最先到达的消息将会被删除，直到总大小不超过x-max-length-byte为止。</p><p>Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();<br>//表示队列中最多存放三条消息<br>arguments.put(“x-max-length”,3);<br>Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();<br>//队列中消息总的空间大小<br>arguments.put(“x-max-length-bytes”,10);</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、RabbitMQ简介&quot;&gt;&lt;a href=&quot;#一、Ra
      
    
    </summary>
    
      <category term="消息中间件" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="rabbitmq" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/rabbitmq/"/>
    
      <category term="消息中间件" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JMeter性能测试入门</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/</id>
    <published>2019-12-10T00:21:30.000Z</published>
    <updated>2019-12-10T15:03:33.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JMeter性能测试入门"><a href="#JMeter性能测试入门" class="headerlink" title="JMeter性能测试入门"></a>JMeter性能测试入门</h1><p>[TOC]</p><h3 id="一、JMeter简介"><a href="#一、JMeter简介" class="headerlink" title="一、JMeter简介"></a>一、JMeter简介</h3><blockquote><p>​        Apache JMeter是一款纯java编写负载功能测试和性能测试开源工具软件。相比Loadrunner而言，JMeter小巧轻便且免费，逐渐成为了主流的性能测试工具，是每个测试人员都必须要掌握的工具之一。</p></blockquote><h4 id="1-1、JMeter的作用"><a href="#1-1、JMeter的作用" class="headerlink" title="1.1、JMeter的作用"></a>1.1、<strong>JMeter的作用</strong></h4><blockquote><p>1.能够对HTTP和FTP服务器进行压力和<a href="https://baike.baidu.com/item/性能测试" target="_blank" rel="noopener">性能测试</a>， 也可以对任何数据库进行同样的测试（通过JDBC）。</p><p>2.完全的可移植性和100% 纯java。</p><p>3.完全 Swing 和轻量组件支持（<a href="https://baike.baidu.com/item/预编译" target="_blank" rel="noopener">预编译</a>的JAR使用 javax.swing.*)包。</p><p>4.完全多线程 框架允许通过多个线程并发取样和 通过单独的<a href="https://baike.baidu.com/item/线程组" target="_blank" rel="noopener">线程组</a>对不同的功能同时取样。</p><p>5.精心的GUI设计允许快速操作和更精确的计时。</p><p>6.缓存和离线分析/回放测试结果。</p></blockquote><h4 id="1-2、JMeter的高可扩展性"><a href="#1-2、JMeter的高可扩展性" class="headerlink" title="1.2、JMeter的高可扩展性"></a>1.2、<strong>JMeter的高可扩展性</strong></h4><blockquote><p>1.可链接的取样器允许无限制的测试能力。</p><p>2.各种负载统计表和可链接的<a href="https://baike.baidu.com/item/计时器" target="_blank" rel="noopener">计时器</a>可供选择。</p><p>3.数据分析和可视化<a href="https://baike.baidu.com/item/插件" target="_blank" rel="noopener">插件</a>提供了很好的可扩展性以及个性化。</p><p>4.具有提供动态输入到测试的功能（包括Javascript）。</p><p>5.支持脚本编程的取样器（在1.9.2及以上版本支持BeanShell）。</p></blockquote><h4 id="1-3、意义"><a href="#1-3、意义" class="headerlink" title="1.3、意义"></a>1.3、意义</h4><blockquote><p>1、Label： 定义的HTTP请求名称</p><p>2、Samples： 表示这次测试中一共发出了多少个请求</p><p>3、Average： 访问页面的平均响应时间</p><p>4、Min: 访问页面的最小响应时间</p><p>5、Max: 访问页面的最大响应时间</p><p>6、Error%： 错误的请求的数量/请求的总数</p><p>7、Throughput：每秒完成的请求数</p><p>8、KB/Sec： 每秒从服务器端接收到的数据量</p></blockquote><h4 id="1-4、环境"><a href="#1-4、环境" class="headerlink" title="1.4、环境"></a>1.4、环境</h4><blockquote><p>系统Mac os 、JDK版本1.8、Jmeter版本5.2.1</p></blockquote><h3 id="二、测试接口"><a href="#二、测试接口" class="headerlink" title="二、测试接口"></a>二、测试接口</h3><h4 id="2-1、自定义接口"><a href="#2-1、自定义接口" class="headerlink" title="2.1、自定义接口"></a>2.1、自定义接口</h4><blockquote><p><a href="http://127.0.0.1:8080/zms/student/list" target="_blank" rel="noopener">http://127.0.0.1:8080/zms/student/list</a></p><p><a href="http://127.0.0.1:8080/zms/student/delete/{id}" target="_blank" rel="noopener">http://127.0.0.1:8080/zms/student/delete/{id}</a></p></blockquote><h4 id="2-2、请求参数"><a href="#2-2、请求参数" class="headerlink" title="2.2、请求参数"></a>2.2、请求参数</h4><blockquote><p>学生id</p></blockquote><h3 id="三、JMeter脚本编写"><a href="#三、JMeter脚本编写" class="headerlink" title="三、JMeter脚本编写"></a>三、JMeter脚本编写</h3><h4 id="3-1、添加线程组"><a href="#3-1、添加线程组" class="headerlink" title="3.1、添加线程组"></a>3.1、添加线程组</h4><blockquote><p>右键点击—&gt;测试计划—&gt;添加—&gt;线程（用户）—&gt;线程组</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/001.png" alt></p><blockquote><p>这里可以配置线程组名称，线程数，准备时长（Ramp-Up Period(in seconds)）循环次数，调度器等参数： </p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/002.png" alt></p><blockquote><p>线程组参数详解：</p><p>1、 线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个        线程数。<br>2、 Ramp-Up 时间(秒)准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为10，准备时长为        2，那么需要2秒钟启动10个线程，也就是每秒钟启动5个线程。<br>3、 循环次数：每个线程发送请求的次数。如果线程数为10，循环次数为100，那么每个线程发送100次请        求。总请求数为10*100=1000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行        脚本。<br>4、 Delay Thread creation until needed：直到需要时延迟线程的创建。<br>5、 调度器：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为永远)<br>持续时间（秒）：测试持续时间，会覆盖结束时间<br>启动延迟（秒）：测试延迟启动时间，会覆盖启动时间<br>启动时间：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。<br>结束时间：测试结束时间，持续时间会覆盖它。</p></blockquote><h4 id="3-2、添加HTTP请求"><a href="#3-2、添加HTTP请求" class="headerlink" title="3.2、添加HTTP请求"></a>3.2、添加HTTP请求</h4><blockquote><p>右键点击—&gt;线程组– -&gt; 添加—&gt;取样器(Sampler) —&gt; HTTP请求</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/003.png" alt></p><p>接口测试：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/004.png" alt></p><blockquote><p>Http请求主要参数详解：</p><p>1、Web服务器<br>协议：向目标服务器发送HTTP请求协议，可以是HTTP或HTTPS，默认为HTTP<br>服务器名称或IP ：HTTP请求发送的目标服务器名称或IP<br>端口号：目标服务器的端口号，默认值为80<br>2、Http请求<br>方法：发送HTTP请求的方法，可用方法包括GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE等。<br>路径：目标URL路径（URL中去掉服务器地址、端口及参数后剩余部分）<br>Content encoding ：编码方式，默认为ISO-8859-1编码，这里配置为utf-8<br>同请求一起发送参数<br>在请求中发送的URL参数，用户可以将URL中所有参数设置在本表中，表中每行为一个参数（对应URL中的 name=value），注意参数传入中文时需要勾选“编码”</p></blockquote><h4 id="3-3、添加察看结果树"><a href="#3-3、添加察看结果树" class="headerlink" title="3.3、添加察看结果树"></a>3.3、添加察看结果树</h4><p>右键—&gt;添加—&gt;监听器—&gt;察看结果树</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/005.png" alt></p><p>结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/12/10/jmeter-xing-neng-ce-shi-ru-men/006.png" alt></p><h3 id="3-4、用户自定义变量"><a href="#3-4、用户自定义变量" class="headerlink" title="3.4、用户自定义变量"></a>3.4、用户自定义变量</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JMeter性能测试入门&quot;&gt;&lt;a href=&quot;#JMeter性能测试入门&quot; class=&quot;headerlink&quot; title=&quot;JMeter性能测试入门&quot;&gt;&lt;/a&gt;JMeter性能测试入门&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、JMeter简介&quot;&gt;
      
    
    </summary>
    
      <category term="测试" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter、性能测试" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/Jmeter%E3%80%81%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法设计模式</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/11/26/gong-han-fang-fa-she-ji-mo-shi/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/11/26/gong-han-fang-fa-she-ji-mo-shi/</id>
    <published>2019-11-26T00:15:50.000Z</published>
    <updated>2019-11-26T00:55:39.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>[TOC]</p><h3 id="一、模式的定义与特点"><a href="#一、模式的定义与特点" class="headerlink" title="一、模式的定义与特点"></a>一、模式的定义与特点</h3><blockquote><p>工厂方法（FactoryMethod）模式的定义：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。 如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”，它不属于 GoF 的 23 种经典<a href="http://c.biancheng.net/design_pattern/" target="_blank" rel="noopener">设计模式</a>，它的缺点是增加新产品时会违背“开闭原则”。</p><p>工厂方法模式的主要优点有：</p><ul><li><p>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</p></li><li><p>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</p><p>其缺点是：每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</p></li></ul></blockquote><h3 id="二、模式的结构与实现"><a href="#二、模式的结构与实现" class="headerlink" title="二、模式的结构与实现"></a>二、模式的结构与实现</h3><blockquote><p>工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。本节来分析其基本结构和实现方法。</p></blockquote><h4 id="2-1、模式的结构"><a href="#2-1、模式的结构" class="headerlink" title="2.1、模式的结构"></a>2.1、模式的结构</h4><blockquote><p>工厂方法模式的主要角色如下。</p><ol><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ol></blockquote><blockquote><p>其结构图如图 1 所示。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/11/26/gong-han-fang-fa-she-ji-mo-shi/图一.png" alt></p><h4 id="2-2、模式的实现"><a href="#2-2、模式的实现" class="headerlink" title="2.2、模式的实现"></a>2.2、模式的实现</h4><blockquote><p>根据图 1 写出该模式的代码如下：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactoryTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Product a<span class="token punctuation">;</span>            AbstractFactory af<span class="token punctuation">;</span>            af<span class="token operator">=</span><span class="token punctuation">(</span>AbstractFactory<span class="token punctuation">)</span> ReadXML1<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">=</span>af<span class="token punctuation">.</span><span class="token function">newProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象产品：提供了产品的接口</span><span class="token keyword">interface</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体产品1：实现抽象产品中的抽象方法</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体产品1显示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体产品2：实现抽象产品中的抽象方法</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体产品2显示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象工厂：提供了厂品的生成方法</span><span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">newProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体工厂1：实现了厂品的生成方法</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">newProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体工厂1生成-->具体产品1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体工厂2：实现了厂品的生成方法</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Product <span class="token function">newProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体工厂2生成-->具体产品2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReadXML1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建文档对象</span>            DocumentBuilderFactory dFactory<span class="token operator">=</span>DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder builder<span class="token operator">=</span>dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc<span class="token punctuation">;</span>                                       doc<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/FactoryMethod/config1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取包含类名的文本节点</span>            NodeList nl<span class="token operator">=</span>doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode<span class="token operator">=</span>nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cName<span class="token operator">=</span><span class="token string">"FactoryMethod."</span><span class="token operator">+</span>classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("新类名："+cName);</span>            <span class="token comment" spellcheck="true">//通过类名生成实例对象并将其返回</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>              Object obj<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>         <span class="token punctuation">}</span>           <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、模式的应用实例"><a href="#三、模式的应用实例" class="headerlink" title="三、模式的应用实例"></a>三、模式的应用实例</h3><blockquote><p>【例1】用工厂方法模式设计畜牧场。</p><p>分析：有很多种类的畜牧场，如养马场用于养马，养牛场用于养牛，所以该实例用工厂方法模式比较适合。</p><p>对养马场和养牛场等具体工厂类，只要定义一个生成动物的方法 newAnimal() 即可。由于要显示马类和牛类等具体产品类的图像，所以它们的构造函数中用到了 JPanel、JLabd 和 ImageIcon 等组件，并定义一个 show() 方法来显示它们。</p><p>客户端程序通过对象生成器类 ReadXML2 读取 XML 配置文件中的数据来决定养马还是养牛。其结构图如图 2 所示。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/11/26/gong-han-fang-fa-she-ji-mo-shi/图2.png" alt></p><h3 id="四、模式的应用场景"><a href="#四、模式的应用场景" class="headerlink" title="四、模式的应用场景"></a>四、模式的应用场景</h3><blockquote><p>工厂方法模式通常适用于以下场景。</p><ul><li>客户只知道创建产品的工厂名，而不知道具体的产品名。如 TCL 电视工厂、海信电视工厂等。</li><li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</li><li>客户不关心创建产品的细节，只关心产品的品牌。</li></ul></blockquote><h3 id="五、模式的扩展"><a href="#五、模式的扩展" class="headerlink" title="五、模式的扩展"></a>五、模式的扩展</h3><blockquote><p>当需要生成的产品不多且不会增加，一个具体工厂类就可以完成任务时，可删除抽象工厂类。这时工厂方法模式将退化到简单工厂模式，其结构图如图 4 所示。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/11/26/gong-han-fang-fa-she-ji-mo-shi/图4.png" alt></p><h3 id="六、转载"><a href="#六、转载" class="headerlink" title="六、转载"></a>六、转载</h3><blockquote><p>地址：<a href="http://c.biancheng.net/view/1348.html" target="_blank" rel="noopener">http://c.biancheng.net/view/1348.html</a></p></blockquote><h3 id="七、源码地址"><a href="#七、源码地址" class="headerlink" title="七、源码地址"></a>七、源码地址</h3><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、模式的定义与特点&quot;&gt;&lt;a href=&quot;#一、模式的定义与特点&quot; cl
      
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="factory method" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/factory-method/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java内存模型（一）——基础</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/</id>
    <published>2019-10-17T01:08:38.000Z</published>
    <updated>2019-10-17T06:08:32.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解Java内存模型（一）——基础"><a href="#深入理解Java内存模型（一）——基础" class="headerlink" title="深入理解Java内存模型（一）——基础"></a>深入理解Java内存模型（一）——基础</h1><p>[TOC]</p><h2 id="一、并发编程模型的分类"><a href="#一、并发编程模型的分类" class="headerlink" title="一、并发编程模型的分类"></a>一、并发编程模型的分类</h2><blockquote><p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p><p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写 - 读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p><p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p><p>Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的 Java 程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p></blockquote><h2 id="二、Java-内存模型的抽象"><a href="#二、Java-内存模型的抽象" class="headerlink" title="二、Java 内存模型的抽象"></a>二、Java 内存模型的抽象</h2><blockquote><p>在 java 中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java 语言规范称之为 formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p><p>Java 线程之间的通信由 Java 内存模型（本文简称为 JMM）控制，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/001.png" alt></p><blockquote><p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p><ol><li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li><li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。</li></ol><p>下面通过示意图来说明这两个步骤：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/002.png" alt></p><blockquote><p>如上图所示，本地内存 A 和 B 有主内存中共享变量 x 的副本。假设初始时，这三个内存中的 x 值都为 0。线程 A 在执行时，把更新后的 x 值（假设值为 1）临时存放在自己的本地内存 A 中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的 x 值刷新到主内存中，此时主内存中的 x 值变为了 1。随后，线程 B 到主内存中去读取线程 A 更新后的 x 值，此时线程 B 的本地内存的 x 值也变为了 1。</p><p>从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而且这个通信过程必须要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 java 程序员提供内存可见性保证。</p></blockquote><h2 id="三、重排序"><a href="#三、重排序" class="headerlink" title="三、重排序"></a>三、重排序</h2><blockquote><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p><ol><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ol><p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/003.png" alt></p><blockquote><p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p><p>JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p></blockquote><h2 id="四、处理器重排序与内存屏障指令"><a href="#四、处理器重排序与内存屏障指令" class="headerlink" title="四、处理器重排序与内存屏障指令"></a>四、处理器重排序与内存屏障指令</h2><blockquote><p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读 / 写操作的执行顺序，不一定与内存实际发生的读 / 写操作顺序一致！为了具体说明，请看下面示例：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/004.png" alt></p><blockquote><p>假设处理器 A 和处理器 B 按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0 的结果。具体的原因如下图所示：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/005.png" alt></p><blockquote><p>这里处理器 A 和处理器 B 可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p><p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器 A 的内存操作顺序被重排序了（处理器 B 的情况和处理器 A 一样，这里就不赘述了）。</p><p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写 - 读操做重排序。</p><p>下面是常见处理器允许的重排序类型的列表：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/006.png" alt></p><blockquote><p>上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。</p><p>从上表我们可以看出：常见的处理器都允许 Store-Load 重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO 和 x86 拥有相对较强的处理器内存模型，它们仅允许对写 - 读操作做重排序（因为它们都使用了写缓冲区）。</p><p>※注 1：sparc-TSO 是指以 TSO(Total Store Order) 内存模型运行时，sparc 处理器的特性。</p><p>※注 2：上表中的 x86 包括 x64 及 AMD64。</p><p>※注 3：由于 ARM 处理器的内存模型与 PowerPC 处理器的内存模型非常类似，本文将忽略它。</p><p>※注 4：数据依赖性后文会专门说明。</p><p>为了保证内存可见性，java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 把内存屏障指令分为下列四类：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/007.png" alt></p><blockquote><p>StoreLoad Barriers 是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p></blockquote><h2 id="五、happens-before"><a href="#五、happens-before" class="headerlink" title="五、happens-before"></a>五、happens-before</h2><blockquote><p>从 JDK5 开始，java 使用新的 JSR -133 内存模型（本文除非特别说明，针对的都是 JSR- 133 内存模型）。JSR-133 提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的 happens-before 规则如下：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li><li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li><li>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</li><li>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</li></ul><p>注意，两个操作之间具有 happens-before 关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before 仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before 的定义很微妙，后文会具体说明 happens-before 为什么要这么定义。</p></blockquote><blockquote><p>happens-before 与 JMM 的关系如下图所示：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/17/shen-ru-li-jie-java-nei-cun-mo-xing-yi-ji-chu/008.png" alt></p><blockquote><p>如上图所示，一个 happens-before 规则通常对应于多个编译器重排序规则和处理器重排序规则。对于 java 程序员来说，happens-before 规则简单易懂，它避免程序员为了理解 JMM 提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解Java内存模型（一）——基础&quot;&gt;&lt;a href=&quot;#深入理解Java内存模型（一）——基础&quot; class=&quot;headerlink&quot; title=&quot;深入理解Java内存模型（一）——基础&quot;&gt;&lt;/a&gt;深入理解Java内存模型（一）——基础&lt;/h1&gt;&lt;p&gt;[T
      
    
    </summary>
    
      <category term="JVM" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/JVM/"/>
    
    
      <category term="jvm" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/</id>
    <published>2019-10-14T00:30:28.297Z</published>
    <updated>2019-10-17T01:12:11.818Z</updated>
    
    <content type="html"><![CDATA[<pre><code>title: 从输入URL到页面加载发生了什么date: 2019-10-14 08:30:28tags: [前端经典面试题]categories: 面试题</code></pre><h1 id="从输入URL到页面加载发生了什么"><a href="#从输入URL到页面加载发生了什么" class="headerlink" title="从输入URL到页面加载发生了什么"></a>从输入URL到页面加载发生了什么</h1><p>[TOC]</p><h3 id="一、总体来说分为以下几个过程"><a href="#一、总体来说分为以下几个过程" class="headerlink" title="一、总体来说分为以下几个过程:"></a>一、总体来说分为以下几个过程:</h3><blockquote><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol></blockquote><h3 id="二、具体过程"><a href="#二、具体过程" class="headerlink" title="二、具体过程"></a>二、具体过程</h3><h4 id="2-1、DNS解析"><a href="#2-1、DNS解析" class="headerlink" title="2.1、DNS解析"></a>2.1、DNS解析</h4><blockquote><p>​        DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如<a href="http://www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的" target="_blank" rel="noopener">www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的</a>?</p></blockquote><h5 id="2-1-1、解析过程"><a href="#2-1-1、解析过程" class="headerlink" title="2.1.1、解析过程"></a>2.1.1、解析过程</h5><blockquote><p>DNS解析是一个递归查询的过程。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/001.png" alt></p><blockquote><p>上述图片是查找<a href="http://www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程" target="_blank" rel="noopener">www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程</a>: com -&gt; google.com -&gt; <a href="http://www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为" target="_blank" rel="noopener">www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为</a>: . -&gt; .com -&gt; google.com. -&gt; <a href="http://www.google.com.。" target="_blank" rel="noopener">www.google.com.。</a></p></blockquote><h5 id="2-1-2、DNS优化"><a href="#2-1-2、DNS优化" class="headerlink" title="2.1.2、DNS优化"></a>2.1.2、DNS优化</h5><blockquote><p>了解了DNS的过程，可以为我们带来哪些？上文中请求到google的IP地址时，经历了8个步骤，这个过程中存在多个请求(同时存在UDP和TCP请求，为什么有两种请求方式，请自行查找)。如果每次都经过这么多步骤，是否太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。</p></blockquote><h5 id="2-1-3、DNS缓存"><a href="#2-1-3、DNS缓存" class="headerlink" title="2.1.3、DNS缓存"></a>2.1.3、DNS缓存</h5><blockquote><p>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p><ul><li>在你的chrome浏览器中输入:chrome://dns/，你可以看到chrome浏览器的DNS缓存。</li><li>系统缓存主要存在/etc/hosts(Linux系统)中:</li></ul></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/002.png" alt></p><h5 id="2-1-4、DNS负载均衡"><a href="#2-1-4、DNS负载均衡" class="headerlink" title="2.1.4、DNS负载均衡"></a>2.1.4、DNS负载均衡</h5><blockquote><p>不知道大家有没有思考过一个问题: DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？其实真实的互联网世界背后存在成千上百台服务器，大型的网站甚至更多。但是在用户的眼中，它需要的只是处理他的请求，哪台机器处理请求并不重要。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向。大家耳熟能详的CDN(Content Delivery Network)就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。</p></blockquote><h4 id="2-2、TCP连接"><a href="#2-2、TCP连接" class="headerlink" title="2.2、TCP连接"></a>2.2、TCP连接</h4><blockquote><p>HTTP协议是使用TCP作为其传输层协议的，当TCP出现瓶颈时，HTTP也会受到影响。但由于TCP优化这一块我平常接触的并不是很多，再加上大学时的计算机网络的基础基本上忘完，所以这一部分我也就不在这里分析了。</p></blockquote><h5 id="2-2-1、HTTPS协议"><a href="#2-2-1、HTTPS协议" class="headerlink" title="2.2.1、HTTPS协议"></a>2.2.1、HTTPS协议</h5><blockquote><p>HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/003.png" alt></p><h4 id="2-2-2、HTTPS过程"><a href="#2-2-2、HTTPS过程" class="headerlink" title="2.2.2、HTTPS过程"></a>2.2.2、HTTPS过程</h4><blockquote><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">TLS/SSL握手过程</a>。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。</p></blockquote><h4 id="2-3、HTTP请求"><a href="#2-3、HTTP请求" class="headerlink" title="2.3、HTTP请求"></a>2.3、HTTP请求</h4><blockquote><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式如下:<br><code>Method Request-URL HTTP-Version CRLF</code></p><pre><code>eg: GET index.html HTTP/1.1</code></pre><p>常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。</p><p>TODO：</p><ul><li>GET和POST有什么区别？</li></ul></blockquote><h5 id="2-3-1、请求报头"><a href="#2-3-1、请求报头" class="headerlink" title="2.3.1、请求报头"></a>2.3.1、请求报头</h5><blockquote><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p></blockquote><h5 id="2-3-2-、请求正文"><a href="#2-3-2-、请求正文" class="headerlink" title="2.3.2.、请求正文"></a>2.3.2.、请求正文</h5><blockquote><p>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置Content-Type: application/json。</p></blockquote><h4 id="2-4、服务器处理请求并返回HTTP报文"><a href="#2-4、服务器处理请求并返回HTTP报文" class="headerlink" title="2.4、服务器处理请求并返回HTTP报文"></a>2.4、服务器处理请求并返回HTTP报文</h4><blockquote><p>自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，我使用过的Web服务器有Tomcat, Jetty和Netty等等。</p><p>HTTP响应报文也是由三部分组成: <strong>状态码</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p></blockquote><h5 id="2-4-1、状态码"><a href="#2-4-1、状态码" class="headerlink" title="2.4.1、状态码"></a>2.4.1、状态码</h5><blockquote><p>状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:</p><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。<br>平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500(分别表示什么请自行查找)。</li></ul><p>TODO:</p><ul><li>301和302有什么区别？</li><li>HTTP缓存</li></ul></blockquote><h5 id="2-4-2、响应报头"><a href="#2-4-2、响应报头" class="headerlink" title="2.4.2、响应报头"></a>2.4.2、响应报头</h5><blockquote><p>常见的响应报头字段有: Server, Connection…。</p></blockquote><h5 id="2-4-3、响应报文"><a href="#2-4-3、响应报文" class="headerlink" title="2.4.3、响应报文"></a>2.4.3、响应报文</h5><blockquote><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p></blockquote><h4 id="2-5、浏览器解析渲染页面"><a href="#2-5、浏览器解析渲染页面" class="headerlink" title="2.5、浏览器解析渲染页面"></a>2.5、浏览器解析渲染页面</h4><blockquote><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的？下图对应的就是WebKit渲染的过程。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/004.png" alt></p><blockquote><p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/10/14/cong-shu-ru-url-dao-ye-mian-jia-zai-fa-sheng-liao-shi-me/005.png" alt></p><blockquote><p>JS的解析是由浏览器中的JS解析引擎完成的。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p><p>浏览器在解析过程中，如果遇到请求外部资源时，如图像,iconfont,JS等。浏览器将重复1-6过程下载该资源。请求过程是异步的，并不会影响HTML文档进行加载，但是当文档加载过程中遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中JS文件加载完毕还要等待解析执行完毕，才会继续HTML的渲染过程。原因是因为JS有可能修改DOM结构，这就意味着JS执行完成前，后续所有资源的下载是没有必要的，这就是JS阻塞后续资源下载的根本原因。CSS文件的加载不影响JS文件的加载，但是却影响JS文件的执行。JS代码执行前浏览器必须保证CSS文件已经下载并加载完毕。</p></blockquote><h4 id="2-6、Web优化"><a href="#2-6、Web优化" class="headerlink" title="2.6、Web优化"></a>2.6、Web优化</h4><blockquote><p>上面部分主要介绍了一次完整的请求对应的过程，了解该过程的目的无非就是为了Web优化。在谈到Web优化之前，我们回到一个更原始的问题，Web前端的本质是什么。我的理解是: 将信息快速并友好的展示给用户并能够与用户进行交互。快速的意思就是在尽可能短的时间内完成页面的加载，试想一下当你在淘宝购买东西的时候，淘宝页面加载了10几秒才显示出物品，这个时候你还有心情去购买吗？怎么快速的完成页面的加载呢？优雅的学院派雅虎给出了常用的一些手段，也就是我们熟悉的<a href="https://developer.yahoo.com/performance/" target="_blank" rel="noopener">雅虎34条军规</a>。这34军规实际上就是围绕请求过程进行的一些优化方式。</p><p>如何尽快的加载资源？答案就是能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p></blockquote><h3 id="三、转载"><a href="#三、转载" class="headerlink" title="三、转载"></a>三、转载</h3><p>转自：<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;title: 从输入URL到页面加载发生了什么
date: 2019-10-14 08:30:28
tags: [前端经典面试题]
categories: 面试题
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;从输入URL到页面加载发生了什么&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mysql面试集锦</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/11/mysql-mian-shi-ji-jin/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/10/11/mysql-mian-shi-ji-jin/</id>
    <published>2019-10-11T00:08:08.000Z</published>
    <updated>2019-10-11T08:27:15.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql面试集锦"><a href="#Mysql面试集锦" class="headerlink" title="Mysql面试集锦"></a>Mysql面试集锦</h1><p>[TOC]</p><h3 id="1-索引是什么？有什么作用以及缺点"><a href="#1-索引是什么？有什么作用以及缺点" class="headerlink" title="1.索引是什么？有什么作用以及缺点"></a>1.索引是什么？有什么作用以及缺点</h3><blockquote><p>​        索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。也可以理解为索引就是一本书的目录，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。 索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚集索引那么需要的空间就会更大。</p></blockquote><h3 id="2-索引的目的是什么"><a href="#2-索引的目的是什么" class="headerlink" title="2.索引的目的是什么"></a>2.索引的目的是什么</h3><blockquote><p>为了高效的查找得到我们所需要的数据，减少分组和排序时间，提高我们的mysql的性能</p></blockquote><h3 id="3-索引对数据库系统的负面影响"><a href="#3-索引对数据库系统的负面影响" class="headerlink" title="3.索引对数据库系统的负面影响"></a>3.索引对数据库系统的负面影响</h3><blockquote><p>虽然索引对于数据库的查询提高了效率，但一定程度上增加了空间的占用，同时写入的速度降低了不少，和原有写入数据相比较，多了一步去维护索引的操作。</p></blockquote><h3 id="4-建立索引的原则"><a href="#4-建立索引的原则" class="headerlink" title="4.建立索引的原则"></a>4.建立索引的原则</h3><blockquote><p>选择唯一性索引，为经常需要查询、排序、分组和联合操作的字段建立索引，限制索引的数目，最左前缀匹配原则（非常重要的原则），尽量选择区分度高的列作为索引，字段尽力设置不为null，索引列上不计算。</p></blockquote><h3 id="5-主键、外键和唯一索引的区别"><a href="#5-主键、外键和唯一索引的区别" class="headerlink" title="5.主键、外键和唯一索引的区别"></a>5.主键、外键和唯一索引的区别</h3><blockquote><p>定义：</p><p>主键：唯一标识一条记录，不能有重复的，不允许为空</p><p>外键：表的外键是另一表的主键, 外键可以有重复的, 可以是空值</p><p>索引：该字段没有重复值，但可以有一个空值</p><p>作用：</p><p>主键：用来保证数据完整性</p><p>外键：用来和其他表建立联系用的</p><p>索引：是提高查询排序的速度</p><p>个数：</p><p>主键：主键只能有一个</p><p>外键：一个表可以有多个外键</p><p>索引：一个表可以有多个唯一索引</p></blockquote><h3 id="6-MySQL底层实现，MySQL有什么引擎"><a href="#6-MySQL底层实现，MySQL有什么引擎" class="headerlink" title="6.MySQL底层实现，MySQL有什么引擎"></a>6.MySQL底层实现，MySQL有什么引擎</h3><blockquote><p>mysql底层采用B+tree的存储结构，也就是只有叶子节点携带真实数据，每个节点大小为16Kb，大致三层的B+tree就可以存2000W左右的数据，大大的减少了磁盘的IO。我们常见的存储引擎有InnoDB和MyISAM。</p></blockquote><h3 id="7-InnoDB和MyISAM区别，InnoDB替代了MyISAM，那么MyISAM是否一无是处。"><a href="#7-InnoDB和MyISAM区别，InnoDB替代了MyISAM，那么MyISAM是否一无是处。" class="headerlink" title="7.InnoDB和MyISAM区别，InnoDB替代了MyISAM，那么MyISAM是否一无是处。"></a>7.InnoDB和MyISAM区别，InnoDB替代了MyISAM，那么MyISAM是否一无是处。</h3><blockquote><ol><li>事务支持 &gt; <em>MyISAM：强调的是性能，每次查询具有原子性,其执行速度比 InnoDB 类型更快，但是不提供事务支持。&gt;</em> InnoDB：提供事务支持事务，外部键等高级数据库功能。具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li><li>InnoDB 支持行级锁，而 MyISAM 支持表级锁. &gt;&gt; 用户在操作myisam 表时，select，update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足insert 并发的情况下，可以在表的尾部插入新的数据。</li><li>InnoDB 支持 MVCC, 而 MyISAM 不支持</li><li>InnoDB 支持外键，而 MyISAM 不支持</li><li>表主键 &gt; <em>MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。&gt;</em> InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个6 字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。</li><li>InnoDB 不支持全文索引，而 MyISAM 支持。</li><li>可移植性、备份及恢复 &gt; <em>MyISAM：数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。&gt;</em> InnoDB：免费的方案可以是拷贝数据文件、备份binlog，或者用 mysqldump，在数据量达到几十 G 的时候就相对痛苦了</li><li>存储结构 &gt; <em>MyISAM：每个 MyISAM 在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm 文件存储表定义。数据文件的扩展名为.MYD (MYData)。索引文件的扩展名是.MYI (MYIndex)。&gt;</em> InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为 2GB。</li></ol></blockquote><h3 id="8-什么是事务，事务特性"><a href="#8-什么是事务，事务特性" class="headerlink" title="8.什么是事务，事务特性"></a>8.什么是事务，事务特性</h3><blockquote><p>事务是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。在我们的mysql里也是如此，</p><p>也就是我们的ACID原则。</p><p>A原子性，把一系列的动作视为一个最小的操作（原子操作）</p><p>C一致性，从一个状态到另一个状态是一致的，</p><p>I隔离性：事务与事务之间是不可见相互隔离的，</p><p>D持久性：一旦事务提交，则所做修改就会被永久保存到数据库中。</p><p>可以简单说一下可重复读的MVCC机制，面试官也懵圈</p><ol><li>Read Uncommitted（读取未提交内容） &gt;&gt; 在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</li><li>Read Committed（读取提交内容） &gt;&gt; 这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的 commit，所以同一 select 可能返回不同结果。</li><li>Repeatable Read（可重读） &gt;&gt; 这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（PhantomRead）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB 和 Falcon 存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control 间隙锁）机制解决了该问题。注：其实多版本只是解决不可重复读问题，而加上间隙锁（也就是它这里所谓的并发控制）才解决了幻读问题。</li><li>Serializable（可串行化） &gt;&gt; 这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</li></ol></blockquote><h3 id="9-如何设计一个高并发的系统（对于mysql来讲）"><a href="#9-如何设计一个高并发的系统（对于mysql来讲）" class="headerlink" title="9.如何设计一个高并发的系统（对于mysql来讲）"></a>9.如何设计一个高并发的系统（对于mysql来讲）</h3><blockquote><p>大致就是我们首先应该考虑到的是读写分离操作，再就是我们常见的分库分表操作，水平切分垂直切分。还可以加入缓存redis操作。合理使用索引，explain进行sql优化。</p></blockquote><h3 id="10-锁的优化策略"><a href="#10-锁的优化策略" class="headerlink" title="10.锁的优化策略"></a>10.锁的优化策略</h3><blockquote><p>优化，也就是最小力度的锁我们的数据，也就是行锁，InnoDB的行锁其实是加在索引字段的，避免行锁的升级为表锁，再就是我们尽量避免间隙锁，尽量避免我们的范围修改，如果真的必须范围修改，那么我应该尽可能的缩小到最小的范围。</p></blockquote><h3 id="11-优化SQL的方法"><a href="#11-优化SQL的方法" class="headerlink" title="11.优化SQL的方法"></a>11.优化SQL的方法</h3><blockquote><p>设置一个主键索引，需主要主键索引一般没有真正业务含义，使用int类型自动增长的，而且不能为null，非主键索引字段优先考虑区分度高的业务情况和最左前缀原则，设置为null。如果真的数据量不大，不建议加索引，反而会影响效率的。选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置NOTNULL， 使用连接(JOIN)来代替子查询，适用联合(UNION)来代替手动创建的临时表。学会使用explain进行SQL分析，实在不行可以打开trace进行分析SQL情况，用完记得关闭。</p></blockquote><h3 id="12-谈谈三大范式，什么时候使用反范式设计"><a href="#12-谈谈三大范式，什么时候使用反范式设计" class="headerlink" title="12.谈谈三大范式，什么时候使用反范式设计"></a>12.谈谈三大范式，什么时候使用反范式设计</h3><blockquote><p>第一范式（1NF）：确保每列保持原子性即列不可分</p><p>第二范式（2NF）：属性完全依赖于主键，也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p>第三范式（3NF）：属性和主键不能间接相关（减少数据冗余，这样就可以通过主外键进行表之间连接）</p><p>比如我们表比较多，需要关联时，但我们的A表只需要关联B表的一个字段，而且每次都需要关联查询你，这时我们可以采用A表放置一个冗余字段来存B表的那个字段。这个操作其实就是一个反范式的。</p></blockquote><h3 id="13-说几个mysql中你常用的函数"><a href="#13-说几个mysql中你常用的函数" class="headerlink" title="13.说几个mysql中你常用的函数"></a>13.说几个mysql中你常用的函数</h3><blockquote><p>sum、count 、avg、min、max</p></blockquote><h3 id="14-varchar-100-和varchar-200-的区别"><a href="#14-varchar-100-和varchar-200-的区别" class="headerlink" title="14.varchar(100)和varchar(200)的区别"></a>14.varchar(100)和varchar(200)的区别</h3><blockquote><p>占用内存空间大小肯定是不一致的，但是占用我们磁盘的大小是一致的，我们存储字符串”abc”，完全是一样的磁盘空间，但是对于varchar(100)来说，接收到的字符串长度太长了就会报错的。后面的数字代表可存储的字节数。</p></blockquote><h3 id="15-varchar-20-和int-20-中的20含义一样吗"><a href="#15-varchar-20-和int-20-中的20含义一样吗" class="headerlink" title="15.varchar(20)和int(20)中的20含义一样吗"></a>15.varchar(20)和int(20)中的20含义一样吗</h3><blockquote><p>显然不一致， int(M) M表示的不是数据的最大长度，只是数据宽度，并不影响存储多少位长度的数据；varchar(M) M表示的是varchar类型数据在数据库中存储的最大长度，超过则不存；</p></blockquote><h3 id="16-如何开启慢日志查询？"><a href="#16-如何开启慢日志查询？" class="headerlink" title="16.如何开启慢日志查询？"></a>16.如何开启慢日志查询？</h3><blockquote><p>有2种方式，一是修改mysql的配置文件，二是通过set global语句来实现。slow_query_log = ON，打开日志，long_query_time = 2，设置时间，2秒就算是慢查询，然后重启mysql服务即可，进入mysql控制台，输入SET GLOBAL slow_query_log = ‘ON’;SET GLOBAL long_query_time = X;不需要重启服务就可以得到慢查询日志。</p></blockquote><h3 id="17-有哪些数据库优化方面的经验"><a href="#17-有哪些数据库优化方面的经验" class="headerlink" title="17.有哪些数据库优化方面的经验?"></a>17.有哪些数据库优化方面的经验?</h3><blockquote><ol><li>用 PreparedStatement， 一般来说比 Statement 性能高：一个 sql发给服务器去执行，涉及步骤：语法检查、语义分析， 编译，缓存。</li><li>有外键约束会影响插入和删除性能，如果程序能够保证数据的完整性，那在设计数据库时就去掉外键。</li><li>表中允许适当冗余，譬如，主题帖的回复数量和最后回复时间等4. UNION ALL 要比UNION 快很多，所以，如果可以确认合并的两个结果集中不包含重复数据且不需要排序时的话，那么就使用 UNIONALL。&gt;&gt;UNION 和 UNION ALL 关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。&gt;1. 对重复结果的处理：UNION 在进行表链接后会筛选掉重复的记录，Union All 不会去除重复记录。&gt;2. 对排序的处理：Union 将会按照字段的顺序进行排序；UNION ALL 只是简单的将两个结果合并后就返回。</li></ol></blockquote><h3 id="18-请简述常用的索引有哪些种类"><a href="#18-请简述常用的索引有哪些种类" class="headerlink" title="18.请简述常用的索引有哪些种类?"></a>18.请简述常用的索引有哪些种类?</h3><blockquote><ol><li>普通索引: 即针对数据库表创建索引</li><li>唯一索引: 与普通索引类似，不同的就是：MySQL 数据库索引列的值必须唯一，但允许有空值</li><li>主键索引: 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引</li><li>组合索引: 为了进一步榨取 MySQL 的效率，就要考虑建立组合索引。即将数据库表中的多个字段联合起来作为一个组合索引。</li></ol></blockquote><h3 id="19-mysql-的复制原理以及流程。"><a href="#19-mysql-的复制原理以及流程。" class="headerlink" title="19.mysql 的复制原理以及流程。"></a>19.mysql 的复制原理以及流程。</h3><blockquote><p>Mysql 内建的复制功能是构建大型，高性能应用程序的基础。将 Mysql 的数据分布到多个系统上去，这种分布的机制，是通过将 Mysql 的某一台主机的数据复制到其它主机（slaves）上，并重新执行一遍来实现的。* 复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。</p><p>主服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。这些日志可以记录发送到从服务器的更新。当一个从服务器连接主服务器时，它通知主服务器在日志中读取的最后一次成功更新的位置。</p><p>从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新。过程如下</p><p>\1. 主服务器把更新记录到二进制日志文件中。</p><p>\2. 从服务器把主服务器的二进制日志拷贝到自己的中继日志（replay log）中。3. 从服务器重做中继日志中的时间，把更新应用到自己的数据库上。</p></blockquote><h3 id="20-表中有大字段-X（例如：text-类型），且字段-X-不会经常更新，以读为为主，将该字段拆成子表好处是什么？"><a href="#20-表中有大字段-X（例如：text-类型），且字段-X-不会经常更新，以读为为主，将该字段拆成子表好处是什么？" class="headerlink" title="20.表中有大字段 X（例如：text 类型），且字段 X 不会经常更新，以读为为主，将该字段拆成子表好处是什么？"></a>20.表中有大字段 X（例如：text 类型），且字段 X 不会经常更新，以读为为主，将该字段拆成子表好处是什么？</h3><blockquote><p>如果字段里面有大字段（text,blob)类型的，而且这些字段的访问并不多，这时候放在一起就变成缺点了。MYSQL 数据库的记录存储是按行存储的，数据块大小又是固定的（16K），每条记录越小，相同的块存储的记录就越多。此时应该把大字段拆走，这样应付大部分小字段的查询时，就能提高效率。当需要查询大字段时，此时的关联查询是不可避免的，但也是值得的。拆分开后，对字段的 UPDAE 就要 UPDATE 多个表了</p></blockquote><h3 id="21-MySQL-中-InnoDB-引擎的行锁是通过加在什么上完成（或称实现）的？"><a href="#21-MySQL-中-InnoDB-引擎的行锁是通过加在什么上完成（或称实现）的？" class="headerlink" title="21.MySQL 中 InnoDB 引擎的行锁是通过加在什么上完成（或称实现）的？"></a>21.MySQL 中 InnoDB 引擎的行锁是通过加在什么上完成（或称实现）的？</h3><blockquote><p>InnoDB 行锁是通过给索引上的索引项加锁来实现的，这一点 MySQL 与Oracle 不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB 这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB 才使用行级锁，否则，InnoDB 将使用表锁！</p></blockquote><h3 id="可重复读的MVCC机制"><a href="#可重复读的MVCC机制" class="headerlink" title="可重复读的MVCC机制"></a>可重复读的MVCC机制</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql面试集锦&quot;&gt;&lt;a href=&quot;#Mysql面试集锦&quot; class=&quot;headerlink&quot; title=&quot;Mysql面试集锦&quot;&gt;&lt;/a&gt;Mysql面试集锦&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-索引是什么？有什么作用以及缺点&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="面试题" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="MySql" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2整合FastDFS中间件,实现文件分布式管理</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/</id>
    <published>2019-09-22T08:26:49.000Z</published>
    <updated>2019-09-22T09:38:05.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2整合FastDFS中间件-实现文件分布式管理"><a href="#SpringBoot2整合FastDFS中间件-实现文件分布式管理" class="headerlink" title="SpringBoot2整合FastDFS中间件,实现文件分布式管理"></a>SpringBoot2整合FastDFS中间件,实现文件分布式管理</h1><h3 id="一、FastDFS"><a href="#一、FastDFS" class="headerlink" title="一、FastDFS"></a>一、FastDFS</h3><blockquote><p>​        FastDFS是由淘宝的余庆先⽣生所开发，是⼀一个轻量量级、⾼高性能的开源分布式⽂文件系统，⽤用纯C语⾔言开 发，包括⽂文件存储、⽂文件同步、⽂文件访问(上传、下载)、存取负载均衡、在线扩容、相同内容只存储 ⼀一份等功能，适合有⼤大容量量存储需求的应⽤用或系统。做分布式系统开发时，其中要解决的⼀一个问题就是 图⽚片、⾳音视频、⽂文件共享的问题，分布式⽂文件系统正好可以解决这个需求。同类的分布式⽂文件系统有⾕谷 歌的GFS、HDFS(Hadoop)、TFS(淘宝)等。 </p></blockquote><h3 id="二、FastDFS系统架构"><a href="#二、FastDFS系统架构" class="headerlink" title="二、FastDFS系统架构:"></a>二、FastDFS系统架构:</h3><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/001.png" alt></p><h3 id="三、FastDFS⽂文件上传流程"><a href="#三、FastDFS⽂文件上传流程" class="headerlink" title="三、FastDFS⽂文件上传流程"></a>三、FastDFS⽂文件上传流程</h3><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/002.png" alt></p><blockquote><ol><li>client询问tracker上传到的storage，不需要附加参数;</li><li>tracker返回⼀台可用的storage;</li><li>client直接和storage通讯完成文件上传。</li></ol></blockquote><h3 id="四、FastDFS文件下载流程"><a href="#四、FastDFS文件下载流程" class="headerlink" title="四、FastDFS文件下载流程"></a>四、FastDFS文件下载流程</h3><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/003.png" alt></p><blockquote><ol><li>client询问tracker下载文件的storage，参数为⽂文件标识(组名和⽂文件名);</li><li>tracker返回⼀台可⽤用的storage;</li><li>client直接和storage通讯完成⽂文件下载。</li></ol></blockquote><h3 id="五、核心角色"><a href="#五、核心角色" class="headerlink" title="五、核心角色"></a>五、核心角色</h3><blockquote><p>FastDFS是由跟踪服务器（trackerserver）、存储服务器（storageserver）和客户端（client）三个部分组成。</p><p>1）跟踪服务器</p><p>FastDFS的协调者，负责管理所有的storage server和group，每个storage在启动后会连接Tracker，告知自己所属的group等信息，并保持周期性的心跳，tracker根据storage的心跳信息，建立group到[storage server list]的映射表。</p><p>2）存储服务器</p><p>以组（group）为单位，一个group内包含多台storage机器，数据互为备份，存储空间以group内容量最小的storage为准，所以建议group内的多个storage尽量配置相同，以免造成存储空间的浪费。</p><p>3）客户端</p><p>业务请求的发起方，通过专有接口，使用TCP/IP协议与跟踪器服务器或存储节点进行数据交互。</p></blockquote><h3 id="六、创建SpringBoot工程"><a href="#六、创建SpringBoot工程" class="headerlink" title="六、创建SpringBoot工程"></a>六、创建SpringBoot工程</h3><h4 id="6-1、pom文件"><a href="#6-1、pom文件" class="headerlink" title="6.1、pom文件"></a>6.1、pom文件</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- FastDFS依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.tobato<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.26.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Swagger2 核心依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="6-2、application-yml"><a href="#6-2、application-yml" class="headerlink" title="6.2、application.yml"></a>6.2、application.yml</h4><pre class=" language-yml"><code class="language-yml">spring:  application:    name: zms-fast-dfs  servlet:    multipart:      enabled: true      max-file-size: 10MB      max-request-size: 20MBserver:  port: 8122fdfs:  # 链接超时  connect-timeout: 300  # 读取时间  so-timeout: 300  # 生成缩略图参数  thumb-image:    width: 150    height: 150  tracker-list: 118.24.39.10:22122</code></pre><h4 id="6-3、配置"><a href="#6-3、配置" class="headerlink" title="6.3、配置"></a>6.3、配置</h4><h5 id="6-3-1、FastDfsConfiguration"><a href="#6-3-1、FastDfsConfiguration" class="headerlink" title="6.3.1、FastDfsConfiguration"></a>6.3.1、FastDfsConfiguration</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>FdfsClientConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableMBeanExport</span><span class="token punctuation">(</span>registration<span class="token operator">=</span> RegistrationPolicy<span class="token punctuation">.</span>IGNORE_EXISTING<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastDfsConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="6-3-2、SwaggerConfig"><a href="#6-3-2、SwaggerConfig" class="headerlink" title="6.3.2、SwaggerConfig"></a>6.3.2、SwaggerConfig</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.springboot.fastdfs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"SpringBoot整合fastDF接口测试"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"作者：ZongMan"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"http://zongmansheng.gitee.io/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"version 1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-4、工具类"><a href="#6-4、工具类" class="headerlink" title="6.4、工具类"></a>6.4、工具类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDfsUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FileDfsUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> FastFileStorageClient storageClient <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传文件     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile multipartFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String originalFilename <span class="token operator">=</span> multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">substring</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                        <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StorePath storePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storageClient<span class="token punctuation">.</span><span class="token function">uploadImageAndCrtThumbImage</span><span class="token punctuation">(</span>                multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                multipartFile<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>originalFilename <span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> storePath<span class="token punctuation">.</span><span class="token function">getFullPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除文件     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span>String fileUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"fileUrl ------> 文件路径为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            StorePath storePath <span class="token operator">=</span> StorePath<span class="token punctuation">.</span><span class="token function">parseFromUrl</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            storageClient<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>storePath<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> storePath<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-5、controller"><a href="#6-5、controller" class="headerlink" title="6.5、controller"></a>6.5、controller</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> FileDfsUtil fileDfsUtil <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件上传     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"上传文件"</span><span class="token punctuation">,</span> notes<span class="token operator">=</span><span class="token string">"测试FastDFS文件上传"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/uploadFile"</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token string">"content-type=multipart/form-data"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">uploadFile</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            String path <span class="token operator">=</span> fileDfsUtil<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">=</span> path <span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"上传失败"</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"服务异常"</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 文件删除     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteByPath"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">deleteByPath</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           String filePathName <span class="token operator">=</span> <span class="token string">"group1/M00/00/00/rBAAB12HNaeAdfRXAAA4ubrcS4o415_150x150.jpg"</span><span class="token punctuation">;</span>        fileDfsUtil<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>filePathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"看到这个你就删除成功啦！报仇啦！！！"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="七、启动并访问Swagger"><a href="#七、启动并访问Swagger" class="headerlink" title="七、启动并访问Swagger"></a>七、启动并访问Swagger</h3><blockquote><p>访问地址：<a href="http://127.0.0.1:8122/swagger-ui.html#/" target="_blank" rel="noopener">http://127.0.0.1:8122/swagger-ui.html#/</a></p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/22/springboot2-zheng-he-fastdfs-zhong-jian-jian-shi-xian-wen-jian-fen-bu-shi-guan-li/004.png" alt></p><h3 id="八、源码地址"><a href="#八、源码地址" class="headerlink" title="八、源码地址"></a>八、源码地址</h3><blockquote><p><a href="https://gitee.com/zongmansheng/springboot-zms" target="_blank" rel="noopener">https://gitee.com/zongmansheng/springboot-zms</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot2整合FastDFS中间件-实现文件分布式管理&quot;&gt;&lt;a href=&quot;#SpringBoot2整合FastDFS中间件-实现文件分布式管理&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot2整合FastDFS中间件,实现
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/SpringBoot/"/>
    
    
      <category term="springboot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/springboot/"/>
    
      <category term="fastDFS" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/fastDFS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装软件</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/</id>
    <published>2019-09-20T13:23:26.000Z</published>
    <updated>2019-09-22T08:26:59.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS7安装软件"><a href="#CentOS7安装软件" class="headerlink" title="CentOS7安装软件"></a>CentOS7安装软件</h1><h3 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h3><blockquote><p>云服务器：安装CentOS 7</p><p>远程连接工具：FinalShell</p></blockquote><h3 id="二、安装java环境"><a href="#二、安装java环境" class="headerlink" title="二、安装java环境"></a>二、安装java环境</h3><h4 id="下载jdk1-8"><a href="#下载jdk1-8" class="headerlink" title="下载jdk1.8"></a>下载jdk1.8</h4><blockquote><p>wget –no-cookies –no-check-certificate –header “Cookie: gpw_e24=http%3A%2F%2F<a href="http://www.oracle.com%2F" target="_blank" rel="noopener">www.oracle.com%2F</a>; oraclelicense=accept-securebackup-cookie” “<a href="http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;" target="_blank" rel="noopener">http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</a></p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/001.png" alt></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre><code>tar -zxvf jdk-8u131-linux-x64.tar.gz</code></pre><p>重命名</p><pre><code>mv jdk-8u131-linux-x64.tar.gz /jdk8</code></pre><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><pre><code>vi /etc/profile</code></pre><pre><code>export JAVA_HOME=/usr/local/java8/jdk8export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</code></pre><p>环境生效</p><pre><code>source /etc/profile</code></pre><h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><h4 id="安装gcc（编译时需要）"><a href="#安装gcc（编译时需要）" class="headerlink" title="安装gcc（编译时需要）"></a>安装gcc（编译时需要）</h4><blockquote><p>FastDFS是C语言开发，安装FastDFS需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc</p></blockquote><pre><code>yum install -y gcc gcc-c++</code></pre><h4 id="安装libevent（运行时需求）"><a href="#安装libevent（运行时需求）" class="headerlink" title="安装libevent（运行时需求）"></a>安装libevent（运行时需求）</h4><blockquote><p>若安装了桌面图形界面，就不需要安装；FastDFS依赖libevent库；</p></blockquote><pre><code>yum -y install libevent</code></pre><h4 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h4><pre><code>wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz</code></pre><h4 id="修改名字"><a href="#修改名字" class="headerlink" title="修改名字"></a>修改名字</h4><pre><code> mv V1.0.7.tar.gz libfastcommon-1.0.7.tar.gz</code></pre><h4 id="解压并进入"><a href="#解压并进入" class="headerlink" title="解压并进入"></a>解压并进入</h4><pre><code>tar -zxvf libfastcommon-1.0.7.tar.gzcd libfastcommon-1.0.7/</code></pre><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre><code>./make.sh</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/002.png" alt></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>./make.sh install</code></pre><h4 id="设置几个软连接"><a href="#设置几个软连接" class="headerlink" title="设置几个软连接"></a>设置几个软连接</h4><pre><code>ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.soln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.soln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.soln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so</code></pre><h4 id="安装-tracker-（跟踪器）服务-FastDFS-v5-05-tar-gz"><a href="#安装-tracker-（跟踪器）服务-FastDFS-v5-05-tar-gz" class="headerlink" title="安装 tracker （跟踪器）服务 FastDFS_v5.05.tar.gz"></a>安装 tracker （跟踪器）服务 FastDFS_v5.05.tar.gz</h4><pre><code>wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz</code></pre><h4 id="修改名字-1"><a href="#修改名字-1" class="headerlink" title="修改名字"></a>修改名字</h4><pre><code>mv V5.05.tar.gz FastDFS_v5.05.tar.gz</code></pre><p>解压进入编译安装</p><pre><code>tar -zxvf FastDFS_v5.05.tar.gzcd fastdfs-5.05/./make.sh ./make.sh install</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/003.png" alt></p><h4 id="配置和启动tracker"><a href="#配置和启动tracker" class="headerlink" title="配置和启动tracker"></a>配置和启动tracker</h4><blockquote><p>切换目录到： /etc/fdfs/ 目录下；</p><p>拷贝一份新的tracker配置文件</p></blockquote><pre><code>cp tracker.conf.sample tracker.conf</code></pre><blockquote><p>修改tracker.conf ; </p></blockquote><pre><code>vim tracker.confbase_path=/home/yuqing/fastdfs  改为:  base_path=/home/fastdfshttp.server_port  改为： 80</code></pre><h4 id="创建-home-fastdfs-目录"><a href="#创建-home-fastdfs-目录" class="headerlink" title="创建 /home/fastdfs 目录"></a>创建 /home/fastdfs 目录</h4><pre><code>mkdir /home/fastdfs</code></pre><h4 id="启动tracker，运行如下命令："><a href="#启动tracker，运行如下命令：" class="headerlink" title="启动tracker，运行如下命令："></a>启动tracker，运行如下命令：</h4><pre><code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code></pre><blockquote><p>注意：在/home/fastdfs/ 目录下生成两个目录， 一个是数据，一个是日志</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/004.png" alt></p><h4 id="配置和启动storage"><a href="#配置和启动storage" class="headerlink" title="配置和启动storage"></a>配置和启动storage</h4><blockquote><p>由于上面已经安装过FastDFS，这里只需要配置storage就好了；</p><p>（1）切换目录到： /etc/fdfs/ 目录下；</p><p>（2）拷贝一份新的storage配置文件</p></blockquote><blockquote><pre><code>cp storage.conf.sample storage.conf</code></pre></blockquote><blockquote><p>修改storage.conf ; </p></blockquote><pre><code>vim storage.conf</code></pre><blockquote><pre><code>group_name=group1 #配置组名base_path=/home/yuqing/fastdfs    改为:  base_path=/home/fastdfs#store存放文件的位置(store_path)store_path0=/home/yuqing/fastdfs  改为： store_path0=/home/fdfs_storage #如果有多个挂载磁盘则定义多个store_path，如下#store_path1=.....#store_path2=......#配置tracker服务器:IPtracker_server=192.168.172.20:22122#如果有多个则配置多个tracker#tracker_server=192.168.101.4:22122#配置http端口http.server_port=88</code></pre></blockquote><h4 id="创建-home-fdfs-storage-目录"><a href="#创建-home-fdfs-storage-目录" class="headerlink" title="创建 /home/fdfs_storage 目录"></a>创建 /home/fdfs_storage 目录</h4><pre><code>mkdir /home/fdfs_storage</code></pre><h4 id="启动storage，-运行命令如下："><a href="#启动storage，-运行命令如下：" class="headerlink" title="启动storage， 运行命令如下："></a>启动storage， 运行命令如下：</h4><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><blockquote><p>启动完成后进入 /home/fdfs_storage/data 目录下，显示目录如下：</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/005.png" alt></p><h4 id="使用FastDFS自带工具测试"><a href="#使用FastDFS自带工具测试" class="headerlink" title="使用FastDFS自带工具测试"></a>使用FastDFS自带工具测试</h4><blockquote><p>（1）切换目录到 /etc/fdfs/ 目录下；</p><p>（2）拷贝一份新的client配置文件</p></blockquote><pre><code>cp client.conf.sample client.conf</code></pre><blockquote><p>（3）修改client.conf ;   <strong>vim client.conf，</strong>修改基本路径和tracker_server如下：</p></blockquote><pre><code>base_path = /home/fastdfstracker_server = 118.24.39.10:22122</code></pre><p>上传一张图片到新建的pic目录下</p><blockquote><p>进行测试，运行如下：（运行测试程序，读取/etc/fdfs/client.conf 文件，上传/pic目录下的timg.jpg文件）</p></blockquote><pre><code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload /pic/timg.jpg</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/006.png" alt></p><h3 id="FastDFS-和nginx整合"><a href="#FastDFS-和nginx整合" class="headerlink" title="FastDFS 和nginx整合"></a>FastDFS 和nginx整合</h3><h4 id="下载nginx插件"><a href="#下载nginx插件" class="headerlink" title="下载nginx插件"></a>下载nginx插件</h4><pre><code>wget http://jaist.dl.sourceforge.NET/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz</code></pre><p>编辑Nginx模块的配置文件：</p><blockquote><p>找到下面一行包含有 local 字眼去掉，因为这三个路径根本不是在 local 目录下的</p><pre>CORE_INCS="$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/"</pre>改为如下：<pre>CORE_INCS="$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/"</pre><p>复制文件：cp /usr/local/fastDFS/fastdfs-5.05/conf/http.conf /etc/fdfs<br>复制文件：cp /usr/local/fastDFS/fastdfs-5.05/conf/mime.types /etc/fdfs</p></blockquote><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><pre><code>tar -zxvf nginx-1.11.8.tar.gz cd nginx-1.11.8./configure --add-module=/usr/local/fastDFS/fastdfs-nginx-module/srcmakemake install</code></pre><blockquote><p>复制 Nginx 模块的配置文件：cp /opt/setups/FastDFS/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</p></blockquote><pre><code>cp /usr/local/fastDFS/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</code></pre><blockquote><p>编辑 Nginx 模块的配置文件：vim /etc/fdfs/mod_fastdfs.conf，编辑内容看下面中文注释<br>如果在已经启动 Nginx 的情况下修改下面内容记得要重启 Nginx。</p></blockquote><pre><code>vi mod_fastdfs.conf</code></pre><pre><code>base_path=/home/fastdfstracker_server=118.24.39.10:22122 #tracker_server=118.24.39.10:22122 #(多个tracker配置多行)url_have_group_name=true        #url中包含group名称store_path0=/home/fdfs_storage  #指定文件存储路径（上面配置的store路径）</code></pre><h4 id="将libfdfsclient-so拷贝至-usr-lib下"><a href="#将libfdfsclient-so拷贝至-usr-lib下" class="headerlink" title="将libfdfsclient.so拷贝至/usr/lib下"></a>将libfdfsclient.so拷贝至/usr/lib下</h4><pre><code>cp /usr/lib64/libfdfsclient.so /usr/lib/</code></pre><h4 id="创建nginx-client目录"><a href="#创建nginx-client目录" class="headerlink" title="创建nginx/client目录"></a>创建nginx/client目录</h4><pre><code>mkdir -p /var/temp/nginx/client</code></pre><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4><pre><code>vi nginx.conf</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/007.png" alt></p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/008.png" alt></p><blockquote><p><strong>说明</strong>：</p><p>　　(a.) server_name指定本机ip；</p><p>　　(b.) location /group1/M00/：group1为nginx 服务FastDFS的分组名称，M00是FastDFS自动生成编号，对应store_path0=/home/fdfs_storage，如果FastDFS定义store_path1，这里就是M01</p></blockquote><h4 id="Nginx启动"><a href="#Nginx启动" class="headerlink" title="Nginx启动"></a>Nginx启动</h4><pre><code>cd /usr/local/nginx/sbin/./nginx </code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/centos7-an-zhuang-java-huan-jing/009.png" alt></p><h3 id="在浏览器中访问上传到fastDFS的图片"><a href="#在浏览器中访问上传到fastDFS的图片" class="headerlink" title="在浏览器中访问上传到fastDFS的图片"></a>在浏览器中访问上传到fastDFS的图片</h3><p><a href="http://118.24.39.10/group1/M00/00/00/rBAAB12E7iyABm0TAACu49zL7nc697_big.jpg" target="_blank" rel="noopener">http://118.24.39.10/group1/M00/00/00/rBAAB12E7iyABm0TAACu49zL7nc697_big.jpg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CentOS7安装软件&quot;&gt;&lt;a href=&quot;#CentOS7安装软件&quot; class=&quot;headerlink&quot; title=&quot;CentOS7安装软件&quot;&gt;&lt;/a&gt;CentOS7安装软件&lt;/h1&gt;&lt;h3 id=&quot;一、工具&quot;&gt;&lt;a href=&quot;#一、工具&quot; class=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/Linux/"/>
    
    
      <category term="操作系统" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>mysql优化专题</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/</id>
    <published>2019-09-19T23:53:12.000Z</published>
    <updated>2019-09-20T00:12:49.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql优化专题"><a href="#Mysql优化专题" class="headerlink" title="Mysql优化专题"></a>Mysql优化专题</h1><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/001.png" alt></p><h3 id="一、索引的概述"><a href="#一、索引的概述" class="headerlink" title="一、索引的概述"></a>一、索引的概述</h3><h4 id="1）什么是索引？"><a href="#1）什么是索引？" class="headerlink" title="1）什么是索引？"></a>1）什么是索引？</h4><blockquote><p>​        索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。更通俗的说，索引就相当于目录。当你在用新华字典时，帮你把目录撕掉了，你查询某个字开头的成语只能从第一页翻到第一千页。累！把目录还给你，则能快速定位！</p></blockquote><h4 id="2）索引的优缺点："><a href="#2）索引的优缺点：" class="headerlink" title="2）索引的优缺点："></a>2）索引的优缺点：</h4><blockquote><p>​        可以大大加快数据的检索速度，这也是创建索引的最主要的原因。，且通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。但是，索引也是有缺点的：索引需要额外的维护成本；因为索引文件是单独存在的文件,对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。</p></blockquote><h3 id="二、索引的基本使用"><a href="#二、索引的基本使用" class="headerlink" title="二、索引的基本使用"></a>二、索引的基本使用</h3><h4 id="1）创建索引：（三种方式）"><a href="#1）创建索引：（三种方式）" class="headerlink" title="1）创建索引：（三种方式）"></a>1）创建索引：（三种方式）</h4><h5 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h5><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/002.png" alt></p><h5 id="第二种方式：使用ALTER-TABLE命令去增加索引："><a href="#第二种方式：使用ALTER-TABLE命令去增加索引：" class="headerlink" title="第二种方式：使用ALTER TABLE命令去增加索引："></a>第二种方式：使用ALTER TABLE命令去增加索引：</h5><blockquote><p>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/003.png" alt></p><blockquote><p>其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。</p><p>索引名index_name可自己命名，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p></blockquote><h5 id="第三种方式：使用CREATE-INDEX命令创建"><a href="#第三种方式：使用CREATE-INDEX命令创建" class="headerlink" title="第三种方式：使用CREATE INDEX命令创建"></a>第三种方式：使用CREATE INDEX命令创建</h5><blockquote><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/004.png" alt></p><h3 id="三、索引的基本原理"><a href="#三、索引的基本原理" class="headerlink" title="三、索引的基本原理"></a>三、索引的基本原理</h3><blockquote><p>​        索引用来快速地寻找那些具有特定值的记录。如果没有索引，一般来说执行查询时遍历整张表。</p><p>索引的原理很简单，就是把无序的数据变成有序的查询</p><p>1、把创建了索引的列的内容进行排序</p><p>2、对排序结果生成倒排表</p><p>3、在倒排表内容上拼上数据地址链</p><p>4、在查询的时候，先拿到倒排表内容，再取出数据地址链，从而拿到具体数据</p></blockquote><h3 id="四、索引的数据结构（b树，hash）"><a href="#四、索引的数据结构（b树，hash）" class="headerlink" title="四、索引的数据结构（b树，hash）"></a>四、索引的数据结构（b树，hash）</h3><h4 id="1）B树索引"><a href="#1）B树索引" class="headerlink" title="1）B树索引"></a>1）B树索引</h4><blockquote><p>​        mysql通过存储引擎取数据，基本上90%的人用的就是InnoDB了，按照实现方式分，InnoDB的索引类型目前只有两种：BTREE（B树）索引和HASH索引。B树索引是Mysql数据库中使用最频繁的索引类型，基本所有存储引擎都支持BTree索引。通常我们说的索引不出意外指的就是（B树）索引（实际是用B+树实现的，因为在查看表索引时，mysql一律打印BTREE，所以简称为B树索引）</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/005.png" alt></p><blockquote><p>查询方式：</p><p>主键索引区:PI(关联保存的时数据的地址)按主键查询,</p><p>普通索引区:si(关联的id的地址,然后再到达上面的地址)。所以按主键查询,速度最快</p><p>B+tree性质：</p><p>1.）n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。</p><p>2.）所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p><p>3.）所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。</p><p>4.）B+ 树中，数据对象的插入和删除仅在叶节点上进行。</p><p>5.）B+树有2个头指针，一个是树的根节点，一个是最小关键码的叶节点。</p></blockquote><h4 id="2）哈希索引"><a href="#2）哈希索引" class="headerlink" title="2）哈希索引"></a>2）哈希索引</h4><blockquote><p>​        简要说下，类似于数据结构中简单实现的HASH表（散列表）一样，当我们在mysql中用哈希索引时，主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。</p></blockquote><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/20/mysql-you-hua-zhuan-ti/006.png" alt></p><h3 id="五、创建索引的原则（重中之重）"><a href="#五、创建索引的原则（重中之重）" class="headerlink" title="五、创建索引的原则（重中之重）"></a>五、创建索引的原则（重中之重）</h3><blockquote><p>索引虽好，但也不是无限制的使用，最好符合一下几个原则</p><p>1） 最左前缀匹配原则，组合索引非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2）较频繁作为查询条件的字段才去创建索引</p><p>3）更新频繁字段不适合创建索引</p><p>4）若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)</p><p>5）尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><p>6）定义有外键的数据列一定要建立索引。</p><p>7）对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</p><p>8）对于定义为text、image和bit的数据类型的列不要建立索引。</p></blockquote><h3 id="六、百万级别或以上的数据如何删除"><a href="#六、百万级别或以上的数据如何删除" class="headerlink" title="六、百万级别或以上的数据如何删除"></a>六、百万级别或以上的数据如何删除</h3><blockquote><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。</p><p>所以我们想要删除百万数据的时候可以先删除索引（此时大概耗时三分多钟）</p><p>然后删除其中无用数据（此过程需要不到两分钟）</p><p>删除完成后重新创建索引(此时数据较少了)创建索引也非常快，约十分钟左右。</p><p>与之前的直接删除绝对是要快速很多，更别说万一删除中断,一切删除会回滚。那更是坑了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql优化专题&quot;&gt;&lt;a href=&quot;#Mysql优化专题&quot; class=&quot;headerlink&quot; title=&quot;Mysql优化专题&quot;&gt;&lt;/a&gt;Mysql优化专题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//github.com/zongmansheng/zongma
      
    
    </summary>
    
      <category term="mysql" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/mysql/"/>
    
      <category term="索引" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程（一）</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/</id>
    <published>2019-09-17T00:30:50.000Z</published>
    <updated>2019-09-17T04:58:05.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java多线程（一）"><a href="#Java多线程（一）" class="headerlink" title="Java多线程（一）"></a>Java多线程（一）</h1><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/001.png" alt></p><h3 id="一-进程和多线程简介"><a href="#一-进程和多线程简介" class="headerlink" title="一 进程和多线程简介"></a>一 进程和多线程简介</h3><h4 id="1-1-相关概念"><a href="#1-1-相关概念" class="headerlink" title="1.1 相关概念"></a>1.1 相关概念</h4><h5 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a><strong>何为线程？</strong></h5><blockquote><p>​        线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p></blockquote><h5 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a><strong>何为进程？</strong></h5><blockquote><p>​        进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p></blockquote><h5 id="线程和进程有何不同？"><a href="#线程和进程有何不同？" class="headerlink" title="线程和进程有何不同？"></a><strong>线程和进程有何不同？</strong></h5><blockquote><p>​        线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p></blockquote><h4 id="1-2-多线程"><a href="#1-2-多线程" class="headerlink" title="1.2 多线程"></a>1.2 多线程</h4><h5 id="何为多线程？"><a href="#何为多线程？" class="headerlink" title="何为多线程？"></a><strong>何为多线程？</strong></h5><blockquote><p>​        多线程就是几乎同时执行多个线程（一个处理器在某一个时间点上永远都只能是一个线程！即使这个处理器是多核的，除非有多个处理器才能实现多个线程同时运行。）。几乎同时是因为实际上多线程程序中的多个线程实际上是一个线程执行一会然后其他的线程再执行，并不是很多书籍所谓的同时执行。</p></blockquote><h5 id="为什么多线程是必要的？"><a href="#为什么多线程是必要的？" class="headerlink" title="为什么多线程是必要的？"></a><strong>为什么多线程是必要的？</strong></h5><blockquote><ol><li>使用线程可以把占据长时间的程序中的任务放到后台去处理</li><li>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</li><li>程序的运行速度可能加快</li></ol></blockquote><h3 id="二-使用多线程"><a href="#二-使用多线程" class="headerlink" title="二 使用多线程"></a>二 使用多线程</h3><h4 id="2-1继承Thread类"><a href="#2-1继承Thread类" class="headerlink" title="2.1继承Thread类"></a>2.1继承Thread类</h4><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单线程运行！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/002.png" alt></p><blockquote><p>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p></blockquote><h4 id="2-2实现Runnable接口"><a href="#2-2实现Runnable接口" class="headerlink" title="2.2实现Runnable接口"></a>2.2实现Runnable接口</h4><p>MyRunnable.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable实现多线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/003.png" alt></p><h3 id="三-实例变量和线程安全"><a href="#三-实例变量和线程安全" class="headerlink" title="三 实例变量和线程安全"></a>三 实例变量和线程安全</h3><blockquote><p>定义线程类中的实例变量针对其他线程可以有共享和不共享之分</p></blockquote><h4 id="3-1-不共享数据的情况"><a href="#3-1-不共享数据的情况" class="headerlink" title="3.1 不共享数据的情况"></a>3.1 不共享数据的情况</h4><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"由 "</span> <span class="token operator">+</span> MyThread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" 计算，count="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/004.png" alt></p><blockquote><p>可以看出每个线程都有一个属于自己的实例变量count，它们之间互不影响。我们再来看看另一种情况</p></blockquote><h4 id="3-2-共享数据的情况"><a href="#3-2-共享数据的情况" class="headerlink" title="3.2 共享数据的情况"></a>3.2 共享数据的情况</h4><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"由 "</span> <span class="token operator">+</span> MyThread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 计算，count="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mythread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 下列线程都是通过mythread对象创建的         */</span>        Thread a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/005.png" alt></p><blockquote><p>可以看出这里已经出现了错误，我们想要的是依次递减的结果。为什么呢？？</p><p>因为在大多数jvm中，count–的操作分为如下下三步：</p><ol><li>取得原有count值</li><li>计算i -1</li><li>对i进行赋值</li></ol><p>所以多个线程同时访问时出现问题就是难以避免的了。</p><p>那么有没有什么解决办法呢？</p><p>答案是：当然有，而且很简单。</p><p>在run方法前加上synchronized关键字即可得到正确答案。</p></blockquote><p>加上关键字后的运行结果：</p><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/006.png" alt></p><h3 id="四-一些常用方法"><a href="#四-一些常用方法" class="headerlink" title="四 一些常用方法"></a>四 一些常用方法</h3><h4 id="4-1-currentThread"><a href="#4-1-currentThread" class="headerlink" title="4.1 currentThread()"></a>4.1 currentThread()</h4><blockquote><p>返回对当前正在执行的线程对象的引用。</p></blockquote><h4 id="4-2-getId"><a href="#4-2-getId" class="headerlink" title="4.2 getId()"></a>4.2 getId()</h4><blockquote><p>返回此线程的标识符</p></blockquote><h4 id="4-3-getName"><a href="#4-3-getName" class="headerlink" title="4.3 getName()"></a>4.3 getName()</h4><blockquote><p>返回此线程的名称</p></blockquote><h4 id="4-4-getPriority"><a href="#4-4-getPriority" class="headerlink" title="4.4 getPriority()"></a>4.4 getPriority()</h4><blockquote><p>返回此线程的优先级</p></blockquote><h4 id="4-5-isAlive"><a href="#4-5-isAlive" class="headerlink" title="4.5 isAlive()"></a>4.5 isAlive()</h4><blockquote><p>测试这个线程是否还处于活动状态。</p></blockquote><blockquote><p>什么是活动状态呢？</p></blockquote><blockquote><p>活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备运行的状态。</p></blockquote><h4 id="4-6-sleep-long-millis"><a href="#4-6-sleep-long-millis" class="headerlink" title="4.6 sleep(long millis)"></a>4.6 sleep(long millis)</h4><blockquote><p>使当前正在执行的线程以指定的毫秒数“休眠”（暂时停止执行），具体取决于系统定时器和调度程序的精度和准确性。</p></blockquote><h4 id="4-7-interrupt"><a href="#4-7-interrupt" class="headerlink" title="4.7 interrupt()"></a>4.7 interrupt()</h4><blockquote><p>中断这个线程。</p></blockquote><h4 id="4-8-interrupted-和isInterrupted"><a href="#4-8-interrupted-和isInterrupted" class="headerlink" title="4.8 interrupted() 和isInterrupted()"></a>4.8 interrupted() 和isInterrupted()</h4><blockquote><p>interrupted()：测试当前线程是否已经是中断状态，执行后具有将状态标志清除为false的功能</p></blockquote><blockquote><p>isInterrupted()： 测试线程Thread对相关是否已经是中断状态，但部清楚状态标志</p></blockquote><h4 id="4-9-setName-String-name"><a href="#4-9-setName-String-name" class="headerlink" title="4.9 setName(String name)"></a>4.9 setName(String name)</h4><blockquote><p>将此线程的名称更改为等于参数 name 。</p></blockquote><h4 id="4-10-isDaemon"><a href="#4-10-isDaemon" class="headerlink" title="4.10 isDaemon()"></a>4.10 isDaemon()</h4><blockquote><p>测试这个线程是否是守护线程。</p></blockquote><h3 id="4-11-setDaemon-boolean-on"><a href="#4-11-setDaemon-boolean-on" class="headerlink" title="4.11 setDaemon(boolean on)"></a>4.11 setDaemon(boolean on)</h3><blockquote><p>将此线程标记为 daemon线程或用户线程。</p></blockquote><h3 id="4-12-join"><a href="#4-12-join" class="headerlink" title="4.12 join()"></a>4.12 join()</h3><blockquote><p>在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</p></blockquote><blockquote><p>join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行</p></blockquote><h3 id="4-13-yield"><a href="#4-13-yield" class="headerlink" title="4.13 yield()"></a>4.13 yield()</h3><blockquote><p>yield()方法的作用是放弃当前的CPU资源，将它让给其他的任务去占用CPU时间。注意：放弃的时间不确定，可能一会就会重新获得CPU时间片。</p></blockquote><h3 id="4-14-setPriority-int-newPriority"><a href="#4-14-setPriority-int-newPriority" class="headerlink" title="4.14 setPriority(int newPriority)"></a>4.14 setPriority(int newPriority)</h3><blockquote><p>更改此线程的优先级</p></blockquote><h3 id="五-如何停止一个线程呢？"><a href="#五-如何停止一个线程呢？" class="headerlink" title="五 如何停止一个线程呢？"></a>五 如何停止一个线程呢？</h3><h4 id="5-1-使用interrupt-方法"><a href="#5-1-使用interrupt-方法" class="headerlink" title="5.1 使用interrupt()方法"></a>5.1 使用interrupt()方法</h4><blockquote><p>我们上面提到了interrupt()方法，先来试一下interrupt()方法能不能停止线程 </p></blockquote><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>运行上诉代码你会发现，线程并不会终止。</p><p>针对上面代码的一个改进：</p><p>interrupted()方法判断线程是否停止，如果是停止状态则break</p></blockquote><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经是停止状态了!我要退出了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看到这句话说明线程并未终止------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main catch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/007.png" alt></p><blockquote><p>for循环虽然停止执行了，但是for循环下面的语句还是会执行，说明线程并未被停止。</p></blockquote><h4 id="5-2-使用return停止线程"><a href="#5-2-使用return停止线程" class="headerlink" title="5.2 使用return停止线程"></a>5.2 使用return停止线程</h4><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ֹͣ停止了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timer="</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        MyThread t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六-线程的优先级"><a href="#六-线程的优先级" class="headerlink" title="六 线程的优先级"></a>六 线程的优先级</h3><blockquote><p>每个线程都具有各自的优先级，线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态。但这个并不意味着低 优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p>线程优先级具有继承特性比如A线程启动B线程，则B线程的优先级和A是一样的。</p><p>线程优先级具有随机性也就是说线程优先级高的不一定每一次都先执行完。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如<strong>Thread.MIN_PRIORITY（常数1）</strong>，<strong>Thread.NORM_PRIORITY（常数5）</strong>,<strong>Thread.MAX_PRIORITY（常数10）</strong>。其中每个线程的优先级都在<strong>Thread.MIN_PRIORITY（常数1）</strong>到<strong>Thread.MAX_PRIORITY（常数10）</strong>之间，在默认情况下优先级都是<strong>Thread.NORM_PRIORITY（常数5）</strong>。</p><p>学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。</p><p><strong>线程优先级具有继承特性测试代码：</strong></p></blockquote><p>MyThread01.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread01</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread1 run priority="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread02 thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyThread02.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread02</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread2 run priority="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread begin priority="</span>                <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread end   priority="</span>                <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread01 thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/008.png" alt></p><h3 id="七-Java多线程分类"><a href="#七-Java多线程分类" class="headerlink" title="七 Java多线程分类"></a>七 Java多线程分类</h3><h4 id="7-1-多线程分类"><a href="#7-1-多线程分类" class="headerlink" title="7.1 多线程分类"></a>7.1 多线程分类</h4><blockquote><p>用户线程：运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><p>守护线程：运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 <strong>“佣人”</strong>。</p><p>特点：一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</p><p>应用：数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</p><p>最常见的守护线程：垃圾回收线程</p></blockquote><h4 id="7-2-如何设置守护线程？"><a href="#7-2-如何设置守护线程？" class="headerlink" title="7.2 如何设置守护线程？"></a>7.2 如何设置守护线程？</h4><blockquote><p>可以通过调用Thead类的setDaemon(true)方法设置当前的线程为守护线程</p><p>注意事项：</p><pre><code>1.  setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateException异常2. 在守护线程中产生的新线程也是守护线程3. 不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</code></pre></blockquote><p>MyThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>         <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Run.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我离开thread对象也不再打印了，也就是停止了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/09/17/java-duo-xian-cheng-yi/009.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java多线程（一）&quot;&gt;&lt;a href=&quot;#Java多线程（一）&quot; class=&quot;headerlink&quot; title=&quot;Java多线程（一）&quot;&gt;&lt;/a&gt;Java多线程（一）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//github.com/zongmansheng/zo
      
    
    </summary>
    
      <category term="多线程" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合activemq</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/09/springboot-zheng-he-activemq/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/09/springboot-zheng-he-activemq/</id>
    <published>2019-09-09T04:38:39.000Z</published>
    <updated>2019-09-09T04:39:56.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合activemq"><a href="#SpringBoot整合activemq" class="headerlink" title="SpringBoot整合activemq"></a>SpringBoot整合activemq</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot整合activemq&quot;&gt;&lt;a href=&quot;#SpringBoot整合activemq&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合activemq&quot;&gt;&lt;/a&gt;SpringBoot整合activemq&lt;/h1&gt;
      
    
    </summary>
    
      <category term="消息中间件" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/SpringBoot/"/>
    
      <category term="activemq" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合七牛云实现图片上传</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/08/springboot-zheng-he-qi-niu-yun-shi-xian-tu-pian-shang-chuan/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/08/springboot-zheng-he-qi-niu-yun-shi-xian-tu-pian-shang-chuan/</id>
    <published>2019-09-08T12:18:55.000Z</published>
    <updated>2019-09-09T00:19:31.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合七牛云实现图片上传"><a href="#SpringBoot整合七牛云实现图片上传" class="headerlink" title="SpringBoot整合七牛云实现图片上传"></a>SpringBoot整合七牛云实现图片上传</h1><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot整合七牛云实现图片上传&quot;&gt;&lt;a href=&quot;#SpringBoot整合七牛云实现图片上传&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合七牛云实现图片上传&quot;&gt;&lt;/a&gt;SpringBoot整合七牛云实现图片上传&lt;/
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/SpringBoot/"/>
    
      <category term="七牛云" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux下常用命令</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/07/linux-xia-chang-yong-ming-ling/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/09/07/linux-xia-chang-yong-ming-ling/</id>
    <published>2019-09-07T01:37:46.000Z</published>
    <updated>2019-09-07T01:43:10.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下常用命令"><a href="#Linux下常用命令" class="headerlink" title="Linux下常用命令"></a>Linux下常用命令</h1><h3 id="一、Linux防火墙查看状态firewall、iptable"><a href="#一、Linux防火墙查看状态firewall、iptable" class="headerlink" title="一、Linux防火墙查看状态firewall、iptable"></a>一、Linux防火墙查看状态firewall、iptable</h3><blockquote><p>一、iptables防火墙<br>1、基本操作</p><p># 查看防火墙状态</p><p>service iptables status  </p><p># 停止防火墙</p><p>service iptables stop  </p><p># 启动防火墙</p><p>service iptables start  </p><p># 重启防火墙</p><p>service iptables restart  </p><p># 永久关闭防火墙</p><p>chkconfig iptables off  </p><p># 永久关闭后重启</p><p>chkconfig iptables on　　</p><p>2、开启80端口</p><p>vim /etc/sysconfig/iptables<br># 加入如下代码<br>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT<br>保存退出后重启防火墙</p><p>service iptables restart<br>二、firewall防火墙<br>1、查看firewall服务状态</p><p>systemctl status firewalld</p><p>出现Active: active (running)切高亮显示则表示是启动状态。</p><p>出现 Active: inactive (dead)灰色表示停止，看单词也行。<br>2、查看firewall的状态</p><p>firewall-cmd –state<br>3、开启、重启、关闭、firewalld.service服务</p><p># 开启<br>service firewalld start<br># 重启<br>service firewalld restart<br># 关闭<br>service firewalld stop<br>4、查看防火墙规则</p><p>firewall-cmd –list-all<br>5、查询、开放、关闭端口</p><h1 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h1><p>firewall-cmd –query-port=8080/tcp</p><h1 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h1><p>firewall-cmd –permanent –add-port=80/tcp</p><h1 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h1><p>firewall-cmd –permanent –remove-port=8080/tcp</p><p>#重启防火墙(修改配置后要重启防火墙)<br>firewall-cmd –reload</p><h1 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h1><p>1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>2、–permanent：表示设置为持久；<br>3、–add-port：标识添加的端口；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux下常用命令&quot;&gt;&lt;a href=&quot;#Linux下常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux下常用命令&quot;&gt;&lt;/a&gt;Linux下常用命令&lt;/h1&gt;&lt;h3 id=&quot;一、Linux防火墙查看状态firewall、iptable&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac下docker环境安装Redis</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/21/mac-xia-docker-huan-jing-an-zhuang-redis/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/21/mac-xia-docker-huan-jing-an-zhuang-redis/</id>
    <published>2019-08-21T00:44:29.000Z</published>
    <updated>2019-08-22T14:04:15.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac下docker环境安装Redis"><a href="#Mac下docker环境安装Redis" class="headerlink" title="Mac下docker环境安装Redis"></a>Mac下docker环境安装Redis</h1><blockquote><p>说明下，以下内容中：<br><code>本地</code>是指，主机，即安装<code>docker</code>的机器环境，一般是物理机<br><code>容器</code>是指，运行<code>docker</code>容器后的内部环境</p></blockquote><h4 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h4><pre><code>docker pull redis</code></pre><blockquote><p>不指定版本默认下载就是最新版本</p></blockquote><h4 id="二、在本地某个位置创建以下内容"><a href="#二、在本地某个位置创建以下内容" class="headerlink" title="二、在本地某个位置创建以下内容"></a>二、在本地某个位置创建以下内容</h4><blockquote><p>建议将以下内容放在一起，方便以后管理和查看</p><p>mac切换用户权限    sudo su</p></blockquote><pre><code># 以/docker/redis为例mkdir /docker/redismkdir /docker/redis/datatouch /docker/redis/redis.conftouch /docker/redis/redis.bash</code></pre><h4 id="三、编辑配置文件"><a href="#三、编辑配置文件" class="headerlink" title="三、编辑配置文件"></a>三、编辑配置文件</h4><pre><code>vim /docker/redis/reoedis.conf</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/08/21/mac-xia-docker-huan-jing-an-zhuang-redis/001.png" alt></p><h4 id="四、编辑启动脚本"><a href="#四、编辑启动脚本" class="headerlink" title="四、编辑启动脚本"></a>四、编辑启动脚本</h4><pre><code>vi /docker/redis/redis.bash</code></pre><pre><code>docker run -p 6379:6379 --name redis -v /docker/redis/redis.conf:/etc/redis/redis.conf -v /docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf </code></pre><pre><code>docker run redis # 从redis镜像运行容器-p 6379:6379 # 映射本地6379端口到容器6379端口，前为本地端口--name redis # 设置容器名称为redis，方便以后使用docker ps进行管理-v /docker/redis/redis.conf:/etc/redis/redis.conf # 关联本地/docker/redis/redis.conf文件到容器中/etc/redis/redis.conf，同样，前为本地-v /docker/redis/data:/data # 关联本地/docker/redis/data到容器内/data目录，此为存放redis数据的目录，为方便以后升级redis，而数据可以留存-d # 后台启动，使用此方式启动，则redis.conf中daemonize必须设置为no，否则会无法启动redis-server /etc/redis/redis.conf # 在容器内启动redis-server的命令，主要是为了加载配置</code></pre><h4 id="五、给与执行权限"><a href="#五、给与执行权限" class="headerlink" title="五、给与执行权限"></a>五、给与执行权限</h4><pre><code>sudo chmod 777 /docker/redis/redis.bash</code></pre><h4 id="六、启动"><a href="#六、启动" class="headerlink" title="六、启动"></a>六、启动</h4><pre><code>/docker/redis/redis.bash# 查看是否已启动docker ps# 如果无法启动或者docker ps中无对应内容，将bash中命令复制出来，删除-d参数启动，查看报错信息# 使用redis-cli或者rdm访问 localhost:6379# 如需访问容器，可使用docker exec -it redis bash# 或直接使用redis-cli访问容器内redisdocker exec -it redis redis-cli</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac下docker环境安装Redis&quot;&gt;&lt;a href=&quot;#Mac下docker环境安装Redis&quot; class=&quot;headerlink&quot; title=&quot;Mac下docker环境安装Redis&quot;&gt;&lt;/a&gt;Mac下docker环境安装Redis&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="docker" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/docker/"/>
    
    
      <category term="redis" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/redis/"/>
    
      <category term="docker" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac下docker环境安装ElasticSearch</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/20/mac-xia-docker-huan-jing-an-zhuang-elasticsearch/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/20/mac-xia-docker-huan-jing-an-zhuang-elasticsearch/</id>
    <published>2019-08-20T00:03:37.000Z</published>
    <updated>2019-08-20T00:21:37.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac下docker环境安装ElasticSearch"><a href="#Mac下docker环境安装ElasticSearch" class="headerlink" title="Mac下docker环境安装ElasticSearch"></a>Mac下docker环境安装ElasticSearch</h1><h4 id="一、Mac上需要装有docker环境"><a href="#一、Mac上需要装有docker环境" class="headerlink" title="一、Mac上需要装有docker环境"></a>一、Mac上需要装有docker环境</h4><h5 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h5><pre><code>docker pull elasticsearch:6.5.3</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/08/20/mac-xia-docker-huan-jing-an-zhuang-elasticsearch/001.png" alt></p><h5 id="2、运行容器"><a href="#2、运行容器" class="headerlink" title="2、运行容器"></a>2、运行容器</h5><pre><code>docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch-6.5.3</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/08/20/mac-xia-docker-huan-jing-an-zhuang-elasticsearch/002.png" alt></p><h5 id="3、进入容器"><a href="#3、进入容器" class="headerlink" title="3、进入容器"></a>3、进入容器</h5><pre><code>docker exec -it elasticsearch-6.5.3 /bin/bash</code></pre><h5 id="4、安装ik分词器"><a href="#4、安装ik分词器" class="headerlink" title="4、安装ik分词器"></a>4、安装ik分词器</h5><pre><code>./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.5.3/elasticsearch-analysis-ik-6.5.3.zip</code></pre><p><img src="//github.com/zongmansheng/zongmansheng.github.io.git/2019/08/20/mac-xia-docker-huan-jing-an-zhuang-elasticsearch/003.png" alt></p><h5 id="5、修改es配置文件"><a href="#5、修改es配置文件" class="headerlink" title="5、修改es配置文件"></a>5、修改es配置文件</h5><pre><code>vi ./config/elasticsearch.yml</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token comment" spellcheck="true"># minimum_master_nodes need to be explicitly set when bound on a public IP</span><span class="token comment" spellcheck="true"># set to 1 to allow single node clusters</span><span class="token comment" spellcheck="true"># Details: https://github.com/elastic/elasticsearch/pull/17288</span><span class="token key atrule">discovery.zen.minimum_master_nodes</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># just for elasticsearch-head plugin</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p>6、退出容器</p><pre><code>exit</code></pre><p>7、停止容器</p><pre><code>docker stop elasticsearch-6.5.3</code></pre><p>8、启动容器</p><pre><code>docker start elasticsearch-6.5.3</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac下docker环境安装ElasticSearch&quot;&gt;&lt;a href=&quot;#Mac下docker环境安装ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;Mac下docker环境安装ElasticSearch&quot;&gt;&lt;/a&gt;Mac下d
      
    
    </summary>
    
      <category term="docker" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/docker/"/>
    
    
      <category term="ElasticSearch" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/ElasticSearch/"/>
    
      <category term="docker" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（七）</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/19/springboot-qi/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/19/springboot-qi/</id>
    <published>2019-08-19T14:46:47.000Z</published>
    <updated>2019-08-20T01:05:26.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-集成ElasticSearch"><a href="#Spring-Boot-集成ElasticSearch" class="headerlink" title="Spring Boot 集成ElasticSearch"></a>Spring Boot 集成ElasticSearch</h1><h3 id="一、ElasticSearch"><a href="#一、ElasticSearch" class="headerlink" title="一、ElasticSearch"></a>一、ElasticSearch</h3><blockquote><p>ElasticSearch 是一个分布式、高扩展、高实时的搜索与<a href="https://baike.baidu.com/item/数据分析/6577123" target="_blank" rel="noopener">数据分析</a>引擎。它能很方便的使大量数据具有搜索、分析和探索的能力。充分利用ElasticSearch的水平伸缩性，能使数据在生产环境变得更有价值。ElasticSearch 的实现原理主要分为以下几个步骤，首先用户将数据提交到Elastic Search 数据库中，再通过分词控制器去将对应的语句分词，将其权重和分词结果一并存入数据，当用户搜索数据时候，再根据权重将结果排名，打分，再将返回结果呈现给用户。</p><p>Elasticsearch是与名为Logstash的数据收集和日志解析引擎以及名为Kibana的分析和可视化平台一起开发的。这三个产品被设计成一个集成解决方案，称为“Elastic Stack”（以前称为“ELK stack”）。</p><p>Elasticsearch可以用于搜索各种文档。它提供可扩展的搜索，具有接近实时的搜索，并支持多租户。”Elasticsearch是分布式的，这意味着索引可以被分成分片，每个分片可以有0个或多个副本。每个节点托管一个或多个分片，并充当协调器将操作委托给正确的分片。再平衡和路由是自动完成的。“相关数据通常存储在同一个索引中，该索引由一个或多个主分片和零个或多个复制分片组成。一旦创建了索引，就不能更改主分片的数量。</p><p>Elasticsearch使用Lucene，并试图通过JSON和Java API提供其所有特性。它支持facetting和percolating，如果新文档与注册查询匹配，这对于通知非常有用。另一个特性称为“网关”，处理索引的长期持久性；例如，在服务器崩溃的情况下，可以从网关恢复索引。Elasticsearch支持实时GET请求，适合作为NoSQL数据存储，但缺少<a href="https://baike.baidu.com/item/分布式/7316617" target="_blank" rel="noopener">分布式</a>事务。</p></blockquote><h3 id="二、创建SpringBoot工程（2-1-7）"><a href="#二、创建SpringBoot工程（2-1-7）" class="headerlink" title="二、创建SpringBoot工程（2.1.7）"></a>二、创建SpringBoot工程（2.1.7）</h3><h4 id="2-1、pom依赖"><a href="#2-1、pom依赖" class="headerlink" title="2.1、pom依赖"></a>2.1、pom依赖</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>27.0.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2、application-yml"><a href="#2-2、application-yml" class="headerlink" title="2.2、application.yml"></a>2.2、application.yml</h4><pre class=" language-yml"><code class="language-yml">spring:  data:    elasticsearch:      cluster-name: docker-cluster      cluster-nodes: localhost:9300</code></pre><h4 id="2-3、创建一个实体"><a href="#2-3、创建一个实体" class="headerlink" title="2.3、创建一个实体"></a>2.3、创建一个实体</h4><blockquote><p>@Document 注解主要声明索引名、类型名、分片数量和备份数量</p><p>@Field 注解主要声明字段对应ES的类型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>EsConsts<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>FieldType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: ZongMan * @Date: 2019-08-20 * @Time: 08:35 * @Vsersion: 1.0 **/</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> EsConsts<span class="token punctuation">.</span>INDEX_NAME<span class="token punctuation">,</span> type <span class="token operator">=</span> EsConsts<span class="token punctuation">.</span>TYPE_NAME<span class="token punctuation">,</span> shards <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> replicas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 主键     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 名字     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Keyword<span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 国家     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Keyword<span class="token punctuation">)</span>    <span class="token keyword">private</span> String country<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 年龄     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生日     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Date<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 介绍     */</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-4、用户持久层"><a href="#2-4、用户持久层" class="headerlink" title="2.4、用户持久层"></a>2.4、用户持久层</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>ElasticsearchRepository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: ZongMan * @Date: 2019-08-20 * @Time: 08:37 * @Vsersion: 1.0 * @description: 用户持久层 **/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据年龄区间查询     *     * @param min 最小值     * @param max 最大值     * @return 满足条件的用户列表     */</span>    List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByAgeBetween</span><span class="token punctuation">(</span>Integer min<span class="token punctuation">,</span> Integer max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-5、ES常量池"><a href="#2-5、ES常量池" class="headerlink" title="2.5、ES常量池"></a>2.5、ES常量池</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>constants<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: ZongMan * @Date: 2019-08-20 * @Time: 08:36 * @Vsersion: 1.0 * @description:  **/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EsConsts</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 索引名称     */</span>    String INDEX_NAME <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 类型名称     */</span>    String TYPE_NAME <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-6、TemplateTest-java"><a href="#2-6、TemplateTest-java" class="headerlink" title="2.6、TemplateTest.java"></a>2.6、TemplateTest.java</h4><blockquote><p>主要测试创建索引、映射配置、删除索引</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>template<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>SpringbootElasticsearchApplicationTests<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ElasticsearchTemplate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: ZongMan * @Date: 2019-08-20 * @Time: 08:41 * @Vsersion: 1.0 * @description: 测试 ElasticTemplate 的创建/删除 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateTest</span> <span class="token keyword">extends</span> <span class="token class-name">SpringbootElasticsearchApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ElasticsearchTemplate esTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试 ElasticTemplate 创建 index     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建索引，会根据Item类的@Document注解信息来创建</span>        esTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置映射，会根据Item类中的id、Field等字段来自动完成映射</span>        esTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试 ElasticTemplate 删除 index     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        esTemplate<span class="token punctuation">.</span><span class="token function">deleteIndex</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-7、PersonRepositoryTest-java"><a href="#2-7、PersonRepositoryTest-java" class="headerlink" title="2.7、PersonRepositoryTest.java"></a>2.7、PersonRepositoryTest.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>respository<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>date<span class="token punctuation">.</span>DateUtil<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>SpringbootElasticsearchApplicationTests<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>PersonRepository<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MatchQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>AggregationBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>terms<span class="token punctuation">.</span>StringTerms<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>avg<span class="token punctuation">.</span>InternalAvg<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span>SortBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>sort<span class="token punctuation">.</span>SortOrder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>PageRequest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>aggregation<span class="token punctuation">.</span>AggregatedPage<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span>FetchSourceFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span>NativeSearchQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: ZongMan * @Date: 2019-08-20 * @Time: 08:39 * @Vsersion: 1.0 * @description: 测试 Repository 操作ES **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonRepositoryTest</span> <span class="token keyword">extends</span> <span class="token class-name">SpringbootElasticsearchApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PersonRepository repo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试新增     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"刘备"</span><span class="token punctuation">,</span> <span class="token string">"蜀国"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> DateUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1990-01-02 03:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"刘备（161年－223年6月10日），即汉昭烈帝（221年－223年在位），又称先主，字玄德，东汉末年幽州涿郡涿县（今河北省涿州市）人，西汉中山靖王刘胜之后，三国时期蜀汉开国皇帝、政治家。\n刘备少年时拜卢植为师；早年颠沛流离，备尝艰辛，投靠过多个诸侯，曾参与镇压黄巾起义。先后率军救援北海相孔融、徐州牧陶谦等。陶谦病亡后，将徐州让与刘备。赤壁之战时，刘备与孙权联盟击败曹操，趁势夺取荆州。而后进取益州。于章武元年（221年）在成都称帝，国号汉，史称蜀或蜀汉。《三国志》评刘备的机权干略不及曹操，但其弘毅宽厚，知人待士，百折不挠，终成帝业。刘备也称自己做事“每与操反，事乃成尔”。\n章武三年（223年），刘备病逝于白帝城，终年六十三岁，谥号昭烈皇帝，庙号烈祖，葬惠陵。后世有众多文艺作品以其为主角，在成都武侯祠有昭烈庙为纪念。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person save <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【save】= {}"</span><span class="token punctuation">,</span> save<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试批量新增     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token string">"魏国"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> DateUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1988-01-02 03:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"曹操（155年－220年3月15日），字孟德，一名吉利，小字阿瞒，沛国谯县（今安徽亳州）人。东汉末年杰出的政治家、军事家、文学家、书法家，三国中曹魏政权的奠基人。\n曹操曾担任东汉丞相，后加封魏王，奠定了曹魏立国的基础。去世后谥号为武王。其子曹丕称帝后，追尊为武皇帝，庙号太祖。\n东汉末年，天下大乱，曹操以汉天子的名义征讨四方，对内消灭二袁、吕布、刘表、马超、韩遂等割据势力，对外降服南匈奴、乌桓、鲜卑等，统一了中国北方，并实行一系列政策恢复经济生产和社会秩序，扩大屯田、兴修水利、奖励农桑、重视手工业、安置流亡人口、实行“租调制”，从而使中原社会渐趋稳定、经济出现转机。黄河流域在曹操统治下，政治渐见清明，经济逐步恢复，阶级压迫稍有减轻，社会风气有所好转。曹操在汉朝的名义下所采取的一些措施具有积极作用。\n曹操军事上精通兵法，重贤爱才，为此不惜一切代价将看中的潜能分子收于麾下；生活上善诗歌，抒发自己的政治抱负，并反映汉末人民的苦难生活，气魄雄伟，慷慨悲凉；散文亦清峻整洁，开启并繁荣了建安文学，给后人留下了宝贵的精神财富，鲁迅评价其为“改造文章的祖师”。同时曹操也擅长书法，唐朝张怀瓘在《书断》将曹操的章草评为“妙品”。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span> <span class="token string">"孙权"</span><span class="token punctuation">,</span> <span class="token string">"吴国"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> DateUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1989-01-02 03:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"孙权（182年－252年5月21日），字仲谋，吴郡富春（今浙江杭州富阳区）人。三国时代孙吴的建立者（229年－252年在位）。\n孙权的父亲孙坚和兄长孙策，在东汉末年群雄割据中打下了江东基业。建安五年（200年），孙策遇刺身亡，孙权继之掌事，成为一方诸侯。建安十三年（208年），与刘备建立孙刘联盟，并于赤壁之战中击败曹操，奠定三国鼎立的基础。建安二十四年（219年），孙权派吕蒙成功袭取刘备的荆州，使领土面积大大增加。\n黄武元年（222年），孙权被魏文帝曹丕册封为吴王，建立吴国。同年，在夷陵之战中大败刘备。黄龙元年（229年），在武昌正式称帝，国号吴，不久后迁都建业。孙权称帝后，设置农官，实行屯田，设置郡县，并继续剿抚山越，促进了江南经济的发展。在此基础上，他又多次派人出海。黄龙二年（230年），孙权派卫温、诸葛直抵达夷州。\n孙权晚年在继承人问题上反复无常，引致群下党争，朝局不稳。太元元年（252年）病逝，享年七十一岁，在位二十四年，谥号大皇帝，庙号太祖，葬于蒋陵。\n孙权亦善书，唐代张怀瓘在《书估》中将其书法列为第三等。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>4L<span class="token punctuation">,</span> <span class="token string">"诸葛亮"</span><span class="token punctuation">,</span> <span class="token string">"蜀国"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> DateUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1992-01-02 03:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"诸葛亮（181年-234年10月8日），字孔明，号卧龙，徐州琅琊阳都（今山东临沂市沂南县）人，三国时期蜀国丞相，杰出的政治家、军事家、外交家、文学家、书法家、发明家。\n早年随叔父诸葛玄到荆州，诸葛玄死后，诸葛亮就在襄阳隆中隐居。后刘备三顾茅庐请出诸葛亮，联孙抗曹，于赤壁之战大败曹军。形成三国鼎足之势，又夺占荆州。建安十六年（211年），攻取益州。继又击败曹军，夺得汉中。蜀章武元年（221年），刘备在成都建立蜀汉政权，诸葛亮被任命为丞相，主持朝政。蜀后主刘禅继位，诸葛亮被封为武乡侯，领益州牧。勤勉谨慎，大小政事必亲自处理，赏罚严明；与东吴联盟，改善和西南各族的关系；实行屯田政策，加强战备。前后六次北伐中原，多以粮尽无功。终因积劳成疾，于蜀建兴十二年（234年）病逝于五丈原（今陕西宝鸡岐山境内），享年54岁。刘禅追封其为忠武侯，后世常以武侯尊称诸葛亮。东晋政权因其军事才能特追封他为武兴王。\n诸葛亮散文代表作有《出师表》《诫子书》等。曾发明木牛流马、孔明灯等，并改造连弩，叫做诸葛连弩，可一弩十矢俱发。诸葛亮一生“鞠躬尽瘁、死而后已”，是中国传统文化中忠臣与智者的代表人物。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Person<span class="token operator">></span> people <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【people】= {}"</span><span class="token punctuation">,</span> people<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试更新     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        repo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            person<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n更新更新更新更新更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Person save <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【save】= {}"</span><span class="token punctuation">,</span> save<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试删除     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主键删除</span>        repo<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象删除</span>        repo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> repo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 批量删除</span>        repo<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试普通查询，按生日倒序     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        repo<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} 生日: {}"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DateUtil<span class="token punctuation">.</span><span class="token function">formatDateTime</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义查询，根据年龄范围查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customSelectRangeOfAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        repo<span class="token punctuation">.</span><span class="token function">findByAgeBetween</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} 年龄: {}"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 高级查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">advanceSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// QueryBuilders 提供了很多静态方法，可以实现大部分查询条件的封装</span>        MatchQueryBuilder queryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"孙权"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【queryBuilder】= {}"</span><span class="token punctuation">,</span> queryBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        repo<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【person】= {}"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义高级查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customAdvanceSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造查询条件</span>        NativeSearchQueryBuilder queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加基本的分词条件</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"东汉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序条件</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">withSort</span><span class="token punctuation">(</span>SortBuilders<span class="token punctuation">.</span><span class="token function">fieldSort</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>SortOrder<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分页条件</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>Person<span class="token operator">></span> people <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【people】总条数 = {}"</span><span class="token punctuation">,</span> people<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【people】总页数 = {}"</span><span class="token punctuation">,</span> people<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【person】= {}，年龄 = {}"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试聚合，测试平均年龄     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">agg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造查询条件</span>        NativeSearchQueryBuilder queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不查询任何结果</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">withSourceFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 平均年龄</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">addAggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"avg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【queryBuilder】= {}"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AggregatedPage<span class="token operator">&lt;</span>Person<span class="token operator">></span> people <span class="token operator">=</span> <span class="token punctuation">(</span>AggregatedPage<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">)</span> repo<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InternalAvg<span class="token punctuation">)</span> people<span class="token punctuation">.</span><span class="token function">getAggregation</span><span class="token punctuation">(</span><span class="token string">"avg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【avgAge】= {}"</span><span class="token punctuation">,</span> avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试高级聚合查询，每个国家的人有几个，每个国家的平均年龄是多少     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">advanceAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造查询条件</span>        NativeSearchQueryBuilder queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不查询任何结果</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">withSourceFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 添加一个新的聚合，聚合类型为terms，聚合名称为country，聚合字段为age</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">addAggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 2. 在国家聚合桶内进行嵌套聚合，求平均年龄</span>                <span class="token punctuation">.</span><span class="token function">subAggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"avg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【queryBuilder】= {}"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 查询</span>        AggregatedPage<span class="token operator">&lt;</span>Person<span class="token operator">></span> people <span class="token operator">=</span> <span class="token punctuation">(</span>AggregatedPage<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">)</span> repo<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 解析</span>        <span class="token comment" spellcheck="true">// 4.1. 从结果中取出名为 country 的那个聚合，因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span>        StringTerms country <span class="token operator">=</span> <span class="token punctuation">(</span>StringTerms<span class="token punctuation">)</span> people<span class="token punctuation">.</span><span class="token function">getAggregation</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.2. 获取桶</span>        List<span class="token operator">&lt;</span>StringTerms<span class="token punctuation">.</span>Bucket<span class="token operator">></span> buckets <span class="token operator">=</span> country<span class="token punctuation">.</span><span class="token function">getBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>StringTerms<span class="token punctuation">.</span>Bucket bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4.3. 获取桶中的key，即国家名称  4.4. 获取桶中的文档数量</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} 总共有 {} 人"</span><span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getKeyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getDocCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.5. 获取子聚合结果：</span>            InternalAvg avg <span class="token operator">=</span> <span class="token punctuation">(</span>InternalAvg<span class="token punctuation">)</span> bucket<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"avg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"平均年龄：{}"</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><blockquote><p>3.1、ElasticSearch 官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.x/getting-started.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.x/getting-started.html</a></p><p>3.2、spring-data-elasticsearch 官方文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.2.RELEASE/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-data/elasticsearch/docs/3.1.2.RELEASE/reference/html/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot-集成ElasticSearch&quot;&gt;&lt;a href=&quot;#Spring-Boot-集成ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 集成ElasticSearch&quot;&gt;&lt;/a&gt;Sprin
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/SpringBoot/"/>
    
    
      <category term="ElasticSearch" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/ElasticSearch/"/>
    
      <category term="docker" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/docker/"/>
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud（七）</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/19/springcloud-qi/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/19/springcloud-qi/</id>
    <published>2019-08-19T02:56:05.000Z</published>
    <updated>2019-08-19T02:57:16.197Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot（六）</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/12/springboot-liu/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/12/springboot-liu/</id>
    <published>2019-08-12T00:20:28.000Z</published>
    <updated>2019-08-12T00:27:02.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot事物Transaction"><a href="#SpringBoot事物Transaction" class="headerlink" title="SpringBoot事物Transaction"></a>SpringBoot事物Transaction</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot事物Transaction&quot;&gt;&lt;a href=&quot;#SpringBoot事物Transaction&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot事物Transaction&quot;&gt;&lt;/a&gt;SpringBoot事物Trans
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/SpringBoot/"/>
    
    
      <category term="springboot2.0" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/springboot2-0/"/>
    
      <category term="事物" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/%E4%BA%8B%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus实现多数据动态切换</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/09/mybatis-plus-shi-xian-duo-shu-ju-dong-tai-qie-huan/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/09/mybatis-plus-shi-xian-duo-shu-ju-dong-tai-qie-huan/</id>
    <published>2019-08-09T12:49:10.000Z</published>
    <updated>2019-08-09T14:54:18.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus实现多数据动态切换"><a href="#Mybatis-Plus实现多数据动态切换" class="headerlink" title="Mybatis-Plus实现多数据动态切换"></a>Mybatis-Plus实现多数据动态切换</h1><h3 id="一、搭建springboot项目"><a href="#一、搭建springboot项目" class="headerlink" title="一、搭建springboot项目"></a>一、搭建springboot项目</h3><h4 id="1-1、pom-xml依赖"><a href="#1-1、pom-xml依赖" class="headerlink" title="1.1、pom.xml依赖"></a>1.1、pom.xml依赖</h4><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis-Plus实现多数据动态切换&quot;&gt;&lt;a href=&quot;#Mybatis-Plus实现多数据动态切换&quot; class=&quot;headerlink&quot; title=&quot;Mybatis-Plus实现多数据动态切换&quot;&gt;&lt;/a&gt;Mybatis-Plus实现多数据动态切换&lt;/
      
    
    </summary>
    
      <category term="springboot" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/springboot/"/>
    
    
      <category term="Springboot2.0" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/Springboot2-0/"/>
    
      <category term="Mybatis-plus 3.0" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/Mybatis-plus-3-0/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL数据库设计规范与原则</title>
    <link href="https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/08/mysql-shu-ju-ku-she-ji-gui-fan-yu-yuan-ze/"/>
    <id>https://github.com/zongmansheng/zongmansheng.github.io.git/2019/08/08/mysql-shu-ju-ku-she-ji-gui-fan-yu-yuan-ze/</id>
    <published>2019-08-08T01:07:49.000Z</published>
    <updated>2019-10-11T00:38:27.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL数据库设计规范与原则"><a href="#MYSQL数据库设计规范与原则" class="headerlink" title="MYSQL数据库设计规范与原则"></a>MYSQL数据库设计规范与原则</h1><p>[TOC]</p><h3 id="一、MYSQL数据库设计规范"><a href="#一、MYSQL数据库设计规范" class="headerlink" title="一、MYSQL数据库设计规范"></a>一、MYSQL数据库设计规范</h3><pre><code>1、数据库命名规范    采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线&#39;_&#39;组成;    命名简洁明确(长度不能超过30个字符);    例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;    除非是备份数据库可以加0-9的自然数：user_db_20151210;2、数据库表名命名规范    采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线&#39;_&#39;组成;    命名简洁明确,多个单词用下划线&#39;_&#39;分隔;    例如：user_login, user_profile, user_detail, user_role, user_role_relation,        user_role_right, user_role_right_relation    表前缀&#39;user_&#39;可以有效的把相同关系的表显示在一起;3、数据库表字段名命名规范    采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线&#39;_&#39;组成;    命名简洁明确,多个单词用下划线&#39;_&#39;分隔;    例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;    每个表中必须有自增主键,add_time(默认系统时间)    表与表之间的相关联字段名称要求尽可能的相同;4、数据库表字段类型规范    用尽量少的存储空间来存数一个字段的数据;    例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);    IP地址最好使用int类型;    固定长度的类型最好使用char,例如：邮编;    能使用tinyint就不要使用smallint,int;    最好给每个字段一个默认值,最好不能为null;5、数据库表索引规范    命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;    为每个表创建一个主键索引;    为每个表创建合理的索引;    建立复合索引请慎重;6、简单熟悉数据库范式    第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);        例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;    第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;        备注：必须先满足第一范式;    第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;        备注：必须先满足第二范式;</code></pre><p>数据库的三范式：<br>①字段不可分。<br>②有主键，非主键字段依赖主键。<br>③非主键字段不能互相依赖。</p><pre><code>    备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;          例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;</code></pre><h3 id="二、MYSQL数据库设计原则"><a href="#二、MYSQL数据库设计原则" class="headerlink" title="二、MYSQL数据库设计原则"></a>二、MYSQL数据库设计原则</h3><pre><code>1、核心原则    不在数据库做运算;    cpu计算务必移至业务层;    控制列数量(字段少而精,字段数建议在20以内);    平衡范式与冗余(效率优先；往往牺牲范式)    拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);2、字段类原则    用好数值类型(用合适的字段类型节约空间);    字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);    避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);    少用text类型(尽量使用varchar代替text字段);3、索引类原则    合理使用索引(改善查询,减慢更新,索引一定不是越多越好);    字符字段必须建前缀索引;    不在索引做列运算;    innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);    不用外键(由程序保证约束);4、sql类原则    sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);    简单的事务;    避免使用trig/func(触发器、函数不用客户端程序取而代之);    不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);    OR改写为IN(or的效率是n级别);    OR改写为UNION(mysql的索引合并很弱智);        select id from t where phone = ’159′ or name = ‘john’;        =&gt;        select id from t where phone=’159′        union        select id from t where name=’jonh’    避免负向%;    慎用count(*);    limit高效分页(limit越大，效率越低);    使用union all替代union(union有去重开销);    少用连接join;    使用group by;    请使用同类型比较;    打散批量更新;5、性能分析工具    show profile;    mysqlsla;    mysqldumpslow;    explain;    show slow log;    show processlist;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL数据库设计规范与原则&quot;&gt;&lt;a href=&quot;#MYSQL数据库设计规范与原则&quot; class=&quot;headerlink&quot; title=&quot;MYSQL数据库设计规范与原则&quot;&gt;&lt;/a&gt;MYSQL数据库设计规范与原则&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://github.com/zongmansheng/zongmansheng.github.io.git/tags/mysql/"/>
    
  </entry>
  
</feed>
